"use strict";(self.webpackChunkzw=self.webpackChunkzw||[]).push([[3298],{9613:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return u}});var i=t(9496);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,i,a=function(e,n){if(null==e)return{};var t,i,a={},l=Object.keys(e);for(i=0;i<l.length;i++)t=l[i],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(i=0;i<l.length;i++)t=l[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=i.createContext({}),c=function(e){var n=i.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},p=function(e){var n=c(e.components);return i.createElement(s.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},d=i.forwardRef((function(e,n){var t=e.components,a=e.mdxType,l=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),d=c(t),u=a,h=d["".concat(s,".").concat(u)]||d[u]||m[u]||l;return t?i.createElement(h,r(r({ref:n},p),{},{components:t})):i.createElement(h,r({ref:n},p))}));function u(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var l=t.length,r=new Array(l);r[0]=d;var o={};for(var s in n)hasOwnProperty.call(n,s)&&(o[s]=n[s]);o.originalType=e,o.mdxType="string"==typeof e?e:a,r[1]=o;for(var c=2;c<l;c++)r[c]=t[c];return i.createElement.apply(null,r)}return i.createElement.apply(null,t)}d.displayName="MDXCreateElement"},3209:function(e,n,t){t.r(n),t.d(n,{assets:function(){return p},contentTitle:function(){return s},default:function(){return u},frontMatter:function(){return o},metadata:function(){return c},toc:function(){return m}});var i=t(2182),a=t(9028),l=(t(9496),t(9613)),r=["components"],o={id:"zca",title:"\u2699\ufe0f Command Architect",image:"zw/logo/320x320.png",description:"Allows to copy segments of commands in history, rearrange segments of current command, delete segments of current command.",keywords:["zsh","command","architect","zsh-plugin"]},s=void 0,c={unversionedId:"ecosystem/plugins/zca",id:"ecosystem/plugins/zca",title:"\u2699\ufe0f Command Architect",description:"Allows to copy segments of commands in history, rearrange segments of current command, delete segments of current command.",source:"@site/docs/ecosystem/plugins/02_comand_architect.md",sourceDirName:"ecosystem/plugins",slug:"/ecosystem/plugins/zca",permalink:"/docs/ecosystem/plugins/zca",editUrl:"https://github.com/z-shell/zw/tree/main/docs/ecosystem/plugins/02_comand_architect.md",tags:[],version:"current",lastUpdatedBy:"Salvydas Lukosius",lastUpdatedAt:1645956898,formattedLastUpdatedAt:"2/27/2022",sidebarPosition:2,frontMatter:{id:"zca",title:"\u2699\ufe0f Command Architect",image:"zw/logo/320x320.png",description:"Allows to copy segments of commands in history, rearrange segments of current command, delete segments of current command.",keywords:["zsh","command","architect","zsh-plugin"]},sidebar:"autoSideBar_1",previous:{title:"\u2699\ufe0f Editing Workbench",permalink:"/docs/ecosystem/plugins/editing-workbech"},next:{title:"\u2699\ufe0f Navigation Tools",permalink:"/docs/ecosystem/plugins/zsh-nav-tools"}},p={},m=[{value:"Install Command Architect",id:"install-command-architect",level:2},{value:"Standalone",id:"standalone",level:3},{value:"With ZI",id:"with-zi",level:3},{value:"With Zgen",id:"with-zgen",level:3},{value:"With Antigen",id:"with-antigen",level:3},{value:"Manual Installation",id:"manual-installation",level:3},{value:"Single File Manual Installation",id:"single-file-manual-installation",level:3},{value:"Performance",id:"performance",level:2},{value:"Fixing tmux, screen and linux vt",id:"fixing-tmux-screen-and-linux-vt",level:2}],d={toc:m};function u(e){var n=e.components,t=(0,a.Z)(e,r);return(0,l.kt)("wrapper",(0,i.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://github.com/z-shell/zsh-cmd-architect"},"z-shell/zsh-cmd-architect"))),(0,l.kt)("p",null,"The Zsh Command Architect allows to copy segments of commands in history, rearrange segments of current command, delete\nsegments of current command. This way user glues command from parts without using a mouse. Advanced history search\n(multi word, without duplicate lines) allows to quickly find the parts."),(0,l.kt)("p",null,"Keys are:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Ctrl-T")," - start Zsh Command Architect (Zshell binding)"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Enter")," - delete selected segment (when in command window) or add selected segment (when in history window)"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"[")," or ",(0,l.kt)("inlineCode",{parentName:"li"},"]")," - move active segment (when in command window)"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Shift-left")," or ",(0,l.kt)("inlineCode",{parentName:"li"},"Shift-right")," - move active segment (when in command window)"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Tab")," - switch between the two available windows"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"g, G")," - beginning and end of the list"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"/")," - start incremental search"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Esc")," - exit incremental search, clearing filter"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"<"),",",(0,l.kt)("inlineCode",{parentName:"li"},">"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"{"),",",(0,l.kt)("inlineCode",{parentName:"li"},"}")," - horizontal scroll"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Ctrl-L")," - redraw of whole display"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Ctrl-O"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"o")," - enter uniq mode (no duplicate lines)"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Ctrl-W")," (in incremental search) - delete whole word"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Ctrl-K")," (in incremental search) - delete whole line"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Ctrl-D"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"Ctrl-U")," - half page up or down"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Ctrl-P"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"Ctrl-N")," - previous and next (also done with vim's j,k)")),(0,l.kt)("h2",{id:"install-command-architect"},"Install Command Architect"),(0,l.kt)("h3",{id:"standalone"},"Standalone"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},'sh -c "$(curl -fsSL https://raw.githubusercontent.com/z-shell/zsh-cmd-architect/main/doc/install.sh)"\n')),(0,l.kt)("p",null,"To update run the command again."),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"ZCA")," will be installed at ",(0,l.kt)("inlineCode",{parentName:"p"},"~/.config/zca/zsh-cmd-architect"),", config files will be copied to ",(0,l.kt)("inlineCode",{parentName:"p"},"~/.config/zca"),". ",(0,l.kt)("inlineCode",{parentName:"p"},".zshrc"),"\nwill be updated with only ",(0,l.kt)("inlineCode",{parentName:"p"},"4")," lines of code that will be added to the bottom."),(0,l.kt)("p",null,"After installing and reloading shell give ",(0,l.kt)("inlineCode",{parentName:"p"},"ZCA")," a quick try with ",(0,l.kt)("inlineCode",{parentName:"p"},"Ctrl-T"),"."),(0,l.kt)("h3",{id:"with-zi"},"With ",(0,l.kt)("a",{parentName:"h3",href:"https://github.com/z-shell/zi"},"ZI")),(0,l.kt)("p",null,"Add ",(0,l.kt)("inlineCode",{parentName:"p"},"zi load z-shell/zsh-cmd-architect")," to ",(0,l.kt)("inlineCode",{parentName:"p"},".zshrc"),". The config files will be available in ",(0,l.kt)("inlineCode",{parentName:"p"},"~/.config/zca"),"."),(0,l.kt)("h3",{id:"with-zgen"},"With Zgen"),(0,l.kt)("p",null,"Add ",(0,l.kt)("inlineCode",{parentName:"p"},"zgen load z-shell/zsh-cmd-architect")," to ",(0,l.kt)("inlineCode",{parentName:"p"},".zshrc")," and issue a ",(0,l.kt)("inlineCode",{parentName:"p"},"zgen reset")," (this assumes that there is a proper\n",(0,l.kt)("inlineCode",{parentName:"p"},"zgen save")," construct in ",(0,l.kt)("inlineCode",{parentName:"p"},".zshrc"),"). The config files will be available in ",(0,l.kt)("inlineCode",{parentName:"p"},"~/.config/zca"),"."),(0,l.kt)("h3",{id:"with-antigen"},"With Antigen"),(0,l.kt)("p",null,"Add ",(0,l.kt)("inlineCode",{parentName:"p"},"antigen bundle z-shell/zsh-cmd-architect")," to ",(0,l.kt)("inlineCode",{parentName:"p"},".zshrc"),". There also should be ",(0,l.kt)("inlineCode",{parentName:"p"},"antigen apply"),". The config files will\nbe in ",(0,l.kt)("inlineCode",{parentName:"p"},"~/.config/znt"),"."),(0,l.kt)("h3",{id:"manual-installation"},"Manual Installation"),(0,l.kt)("p",null,"After extracting ",(0,l.kt)("inlineCode",{parentName:"p"},"ZCA")," to ",(0,l.kt)("inlineCode",{parentName:"p"},"{some-directory}")," add following two lines to ",(0,l.kt)("inlineCode",{parentName:"p"},"~/.zshrc"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},'fpath+=( {some-directory} )\nsource "{some-directory}/zsh-cmd-architect.plugin.zsh"\n')),(0,l.kt)("p",null,"As you can see, no plugin manager is needed to use the ",(0,l.kt)("inlineCode",{parentName:"p"},"*.plugin.zsh")," file. The above two lines of code are all that\nalmost ",(0,l.kt)("strong",{parentName:"p"},"all")," plugin managers do. In fact, what's actually needed is only:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},'source "{some-directory}/zsh-cmd-architect.plugin.zsh"\n')),(0,l.kt)("p",null,"because ",(0,l.kt)("inlineCode",{parentName:"p"},"ZCA")," detects if it is used by ",(0,l.kt)("strong",{parentName:"p"},"any")," plugin manager and can handle ",(0,l.kt)("inlineCode",{parentName:"p"},"$fpath")," update by itself."),(0,l.kt)("h3",{id:"single-file-manual-installation"},"Single File Manual Installation"),(0,l.kt)("p",null,"Running script ",(0,l.kt)("inlineCode",{parentName:"p"},"doc/generate_single_file")," will create single-file version of ",(0,l.kt)("inlineCode",{parentName:"p"},"ZCA"),". It can be sourced from ",(0,l.kt)("inlineCode",{parentName:"p"},".zshrc"),"."),(0,l.kt)("p",null,"Don't forget about configuration files (copy them to ",(0,l.kt)("inlineCode",{parentName:"p"},"~/.config/zca"),")."),(0,l.kt)("h2",{id:"performance"},"Performance"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"ZCA")," is fastest with ",(0,l.kt)("inlineCode",{parentName:"p"},"Zsh")," before ",(0,l.kt)("inlineCode",{parentName:"p"},"5.0.6")," and starting from ",(0,l.kt)("inlineCode",{parentName:"p"},"5.2")),(0,l.kt)("h2",{id:"fixing-tmux-screen-and-linux-vt"},"Fixing tmux, screen and linux vt"),(0,l.kt)("p",null,"If ",(0,l.kt)("inlineCode",{parentName:"p"},"TERM=screen-256color")," (often a case for ",(0,l.kt)("inlineCode",{parentName:"p"},"tmux")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"screen")," sessions) then ",(0,l.kt)("inlineCode",{parentName:"p"},"ncv")," terminfo capability will have ",(0,l.kt)("inlineCode",{parentName:"p"},"2"),"nd\nbit set."),(0,l.kt)("p",null,"This in general means that underline won't work. To fix this by creating your own ",(0,l.kt)("inlineCode",{parentName:"p"},"ncv=0"),"-equipped terminfo file, run:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"{ infocmp -x screen-256color; printf '\\t%s\\n' 'ncv@,'; } > /tmp/t && tic -x /tmp/t\n")),(0,l.kt)("p",null,"A file will be created in directory ",(0,l.kt)("inlineCode",{parentName:"p"},"~/.terminfo")," and will be automatically used, ",(0,l.kt)("inlineCode",{parentName:"p"},"tmux")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"screen")," will work."),(0,l.kt)("p",null,"Similar is for Linux virtual terminal:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"{ infocmp -x linux; printf '\\t%s\\n' 'ncv@,'; } > /tmp/t && tic -x /tmp/t\n")),(0,l.kt)("p",null,"It will not display underline properly, but will instead highlight by a color, which is quite nice. The same will not\nwork for FreeBSD's vt, ",(0,l.kt)("inlineCode",{parentName:"p"},"ZCA")," will detect if that vt is used and will revert to highlighting elements via ",(0,l.kt)("inlineCode",{parentName:"p"},"reverse")," mode."))}u.isMDXComponent=!0}}]);