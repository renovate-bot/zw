"use strict";(self.webpackChunkzw=self.webpackChunkzw||[]).push([[2271],{9613:function(e,n,t){t.d(n,{Zo:function(){return d},kt:function(){return m}});var a=t(9496);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var o=a.createContext({}),u=function(e){var n=a.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},d=function(e){var n=u(e.components);return a.createElement(o.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},c=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,l=e.originalType,o=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),c=u(t),m=r,h=c["".concat(o,".").concat(m)]||c[m]||p[m]||l;return t?a.createElement(h,i(i({ref:n},d),{},{components:t})):a.createElement(h,i({ref:n},d))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var l=t.length,i=new Array(l);i[0]=c;var s={};for(var o in n)hasOwnProperty.call(n,o)&&(s[o]=n[o]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var u=2;u<l;u++)i[u]=t[u];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}c.displayName="MDXCreateElement"},8410:function(e,n,t){t.r(n),t.d(n,{assets:function(){return d},contentTitle:function(){return o},default:function(){return m},frontMatter:function(){return s},metadata:function(){return u},toc:function(){return p}});var a=t(2182),r=t(9028),l=(t(9496),t(9613)),i=["components"],s={id:"rust",title:"\ud83d\udca0 Rust",image:"zw/logo/320x320.png",description:"Annex - Rust documentation",keywords:["annex","rust","zsh","z-shell","zi"]},o=void 0,u={unversionedId:"ecosystem/annexes/rust",id:"ecosystem/annexes/rust",title:"\ud83d\udca0 Rust",description:"Annex - Rust documentation",source:"@site/docs/ecosystem/annexes/01_8_rust.md",sourceDirName:"ecosystem/annexes",slug:"/ecosystem/annexes/rust",permalink:"/docs/ecosystem/annexes/rust",editUrl:"https://github.com/z-shell/zw/tree/main/docs/ecosystem/annexes/01_8_rust.md",tags:[],version:"current",lastUpdatedBy:"Salvydas Lukosius",lastUpdatedAt:1645956898,formattedLastUpdatedAt:"2/27/2022",frontMatter:{id:"rust",title:"\ud83d\udca0 Rust",image:"zw/logo/320x320.png",description:"Annex - Rust documentation",keywords:["annex","rust","zsh","z-shell","zi"]},sidebar:"autoSideBar_1",previous:{title:"\ud83d\udca0 Unscope",permalink:"/docs/ecosystem/annexes/unscope"},next:{title:"\ud83d\udca0 Test",permalink:"/docs/ecosystem/annexes/test"}},d={},p=[{value:"Usage of the annex",id:"usage-of-the-annex",level:2},{value:"Install rust annex",id:"install-rust-annex",level:2},{value:"Rust tools meta plugin",id:"rust-tools-meta-plugin",level:2}],c={toc:p};function m(e){var n=e.components,t=(0,r.Z)(e,i);return(0,l.kt)("wrapper",(0,a.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://github.com/z-shell/z-a-rust"},"z-shell/z-a-rust")," annex installs rust and cargo packages locally inside the\nplugin or snippet directories.")),(0,l.kt)("p",null,"The crate can then have a so called ",(0,l.kt)("em",{parentName:"p"},"shim")," created (name borrowed from ",(0,l.kt)("inlineCode",{parentName:"p"},"rbenv"),") \u2013 a script that's located in the\nstandard ",(0,l.kt)("inlineCode",{parentName:"p"},"$PATH"),' entry "',(0,l.kt)("inlineCode",{parentName:"p"},"$ZPFX/bin"),'" of following contents (example):'),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},'#!/usr/bin/env zsh\n\nfunction lsd {\n local bindir="/root/.zi/plugins/z-shell---null/bin"\n local -x PATH="/root/.zi/plugins/z-shell---null"/bin:"$PATH" # -x means export\n local -x RUSTUP_HOME="/root/.zi/plugins/z-shell---null"/rustup CARGO_HOME="/root/.zi/plugins/z-shell---null"\n\n "$bindir"/"lsd" "$@"\n}\n\nlsd "$@"\n')),(0,l.kt)("p",null,"As it can be seen shim ultimately provides the binary to the command line."),(0,l.kt)("h2",{id:"usage-of-the-annex"},"Usage of the annex"),(0,l.kt)("p",null,"The ZI Annex provides two new ices: ",(0,l.kt)("inlineCode",{parentName:"p"},"rustup")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"cargo''"),". The first one installs rust inside the plugin's folder using\nthe official ",(0,l.kt)("inlineCode",{parentName:"p"},"rustup")," installer. The second one has the following syntax:"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"cargo\"[name-of-the-binary-or-path <-] [[!][c|N|E|O]:]{crate-name} [-> {shim-script-name}]'")),(0,l.kt)("p",null,"Example uses are:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"# Installs rust and then the `lsd' crate and creates\n# the `lsd' shim exposing the binary\nzi ice rustup cargo'!lsd'\nzi load z-shell/null\n\n# Installs rust and then the `exa' crate and creates\n# the `ls' shim exposing the `exa' binary\nzi ice rustup cargo'!exa -> ls'\nzi load z-shell/null\n\n# Installs rust and then the `exa' and `lsd' crates\nzi ice rustup cargo'exa;lsd'\nzi load z-shell/null\n\n# Installs rust and then the `exa' and `lsd' crates\n# and exposes their binaries by altering $PATH\nzi ice rustup cargo'exa;lsd' as\"command\" pick\"bin/(exa|lsd)\"\nzi load z-shell/null\n\n# Installs rust and then the `exa' crate and creates\n# its shim with standard error redirected to /dev/null\nzi ice rustup cargo'!E:exa'\nzi load z-shell/null\n\n# Just install rust and make it available globally in the system\nzi ice id-as\"rust\" wait\"0\" lucid rustup as\"command\" pick\"bin/rustc\" atload=\"export \\\nCARGO_HOME=\\$PWD RUSTUP_HOME=\\$PWD/rustup\"\nzi load z-shell/null\n\n# A little more complex rustup configuration that uses Bin-Gem-Node annex\n# and installs the cargo completion provided with rustup, using for-syntax\nzi id-as=rust wait=1 as=null sbin=\"bin/*\" lucid rustup \\\n  atload=\"[[ ! -f ${ZI[COMPLETIONS_DIR]}/_cargo ]] && zi creinstall rust; \\\n  export CARGO_HOME=\\$PWD RUSTUP_HOME=\\$PWD/rustup\" for \\\nz-shell/null\n")),(0,l.kt)("p",null,"Flags meanings:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"N")," \u2013 redirect both standard output and error to ",(0,l.kt)("inlineCode",{parentName:"li"},"/dev/null")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"E")," \u2013 redirect standard error to ",(0,l.kt)("inlineCode",{parentName:"li"},"/dev/null")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"O")," \u2013 redirect standard output to ",(0,l.kt)("inlineCode",{parentName:"li"},"/dev/null")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"c")," \u2013 change the current directory to the plugin's or snippet's directory before executing the command")),(0,l.kt)("p",null,"As the examples showed, the name of the binary to run and the shim name are by default equal to the name of the crate.\nSpecifying ",(0,l.kt)("inlineCode",{parentName:"p"},"{binary-name} <- \u2026")," and/or ",(0,l.kt)("inlineCode",{parentName:"p"},"\u2026 -> {shim-name}")," allows to override them."),(0,l.kt)("h2",{id:"install-rust-annex"},"Install rust annex"),(0,l.kt)("p",null,"Simply load like a regular plugin, i.e.:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"zi light z-shell/z-a-rust\n")),(0,l.kt)("p",null,"This installs the annex and makes the ",(0,l.kt)("inlineCode",{parentName:"p"},"rustup")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"cargo''")," ices available."),(0,l.kt)("h2",{id:"rust-tools-meta-plugin"},"Rust tools meta plugin"),(0,l.kt)("p",null,"To install ",(0,l.kt)("a",{parentName:"p",href:"meta-plugins#@rust-utils"},"Rust utilities"),", simply run ",(0,l.kt)("inlineCode",{parentName:"p"},"zi light @rust-utils"),", it will install and setup as\nfollowing:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"bin-gem-node annex: Created the cargo shim and set +x on the cargo binary\nbin-gem-node annex: Created the cargo-clippy shim and set +x on the cargo-clippy binary\nbin-gem-node annex: Created the cargo-fmt shim and set +x on the cargo-fmt binary\nbin-gem-node annex: Created the cargo-miri shim and set +x on the cargo-miri binary\nbin-gem-node annex: Created the clippy-driver shim and set +x on the clippy-driver binary\nbin-gem-node annex: Created the rls shim and set +x on the rls binary\nbin-gem-node annex: Created the rustc shim and set +x on the rustc binary\nbin-gem-node annex: Created the rustdoc shim and set +x on the rustdoc binary\nbin-gem-node annex: Created the rustfmt shim and set +x on the rustfmt binary\nbin-gem-node annex: Created the rust-gdb shim and set +x on the rust-gdb binary\nbin-gem-node annex: Created the rust-lldb shim and set +x on the rust-lldb binary\nbin-gem-node annex: Created the rustup shim and set +x on the rustup binary\n")))}m.isMDXComponent=!0}}]);