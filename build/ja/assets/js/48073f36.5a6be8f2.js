"use strict";(self.webpackChunkzw=self.webpackChunkzw||[]).push([[2354],{9613:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return c}});var a=n(9496);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},d=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,l=e.originalType,p=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),u=s(n),c=i,k=u["".concat(p,".").concat(c)]||u[c]||m[c]||l;return n?a.createElement(k,r(r({ref:t},d),{},{components:n})):a.createElement(k,r({ref:t},d))}));function c(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var l=n.length,r=new Array(l);r[0]=u;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o.mdxType="string"==typeof e?e:i,r[1]=o;for(var s=2;s<l;s++)r[s]=n[s];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},3747:function(e,t,n){n.d(t,{Z:function(){return o}});var a=n(9496),i="apiTable_e8hp",l=n(1226);var r=(0,a.forwardRef)((function(e,t){var n=e.name,i=e.children,r=function(e){for(var t=e;(0,a.isValidElement)(t);)t=a.Children.toArray(t.props.children)[0];return t}(i),o=n?n+"-"+r:r,p="#"+o,s=(0,l.k6)();return a.createElement("tr",{id:o,tabIndex:0,ref:s.location.hash===p?t:void 0,onClick:function(){s.push(p)},onKeyDown:function(e){"Enter"===e.key&&s.push(p)}},i.props.children)}));function o(e){var t=e.children,n=e.name,l=a.Children.toArray(t.props.children),o=l[0],p=l[1],s=(0,a.useRef)(null);(0,a.useEffect)((function(){var e;null==(e=s.current)||e.focus()}),[s]);var d=a.Children.map(p.props.children,(function(e){return a.createElement(r,{name:n,ref:s},e)}));return a.createElement("table",{className:i},o,a.createElement("tbody",null,d))}},2117:function(e,t,n){n.r(t),n.d(t,{assets:function(){return m},contentTitle:function(){return s},default:function(){return k},frontMatter:function(){return p},metadata:function(){return d},toc:function(){return u}});var a=n(2182),i=n(9028),l=(n(9496),n(9613)),r=n(3747),o=["components"],p={id:"customization",title:"\ud83c\udfd7 Preferences & Configuration",image:"zw/logo/320x320.png",description:"User Preferences & Configuration",keywords:["customization","preferences","config"]},s=void 0,d={unversionedId:"guides/customization",id:"guides/customization",title:"\ud83c\udfd7 Preferences & Configuration",description:"User Preferences & Configuration",source:"@site/docs/guides/05_customization.md",sourceDirName:"guides",slug:"/guides/customization",permalink:"/ja/docs/guides/customization",editUrl:"https://digitalclouds.crowdin.com/z-shell/ja",tags:[],version:"current",lastUpdatedBy:"Salvydas Lukosius",lastUpdatedAt:1645990837,formattedLastUpdatedAt:"2022/2/27",sidebarPosition:5,frontMatter:{id:"customization",title:"\ud83c\udfd7 Preferences & Configuration",image:"zw/logo/320x320.png",description:"User Preferences & Configuration",keywords:["customization","preferences","config"]},sidebar:"autoSideBar_1",previous:{title:"\ud83d\udee0 Commands",permalink:"/ja/docs/guides/commands"},next:{title:"\u23f2 Benchmarking",permalink:"/ja/docs/guides/benchmark"}},m={},u=[{value:"Customizing Paths",id:"customizing-paths",level:2},{value:"Non-GitHub (Local) Plugins",id:"non-github-local-plugins",level:2},{value:"Extending Git",id:"extending-git",level:2},{value:"Zsh options <code>setopt</code>",id:"zsh-options-setopt",level:2},{value:"History optimization",id:"history-optimization",level:3},{value:"Other tweaks",id:"other-tweaks",level:3},{value:"Style control for the completion system <code>zstyle</code>",id:"style-control-for-the-completion-system-zstyle",level:2},{value:"Fuzzy matching of completions",id:"fuzzy-matching-of-completions",level:3},{value:"Pretty completions",id:"pretty-completions",level:3},{value:"Do menu-driven completion",id:"do-menu-driven-completion",level:3},{value:"Color completion for some things",id:"color-completion-for-some-things",level:3},{value:"Disabling System-Wide <code>compinit</code> Call (Ubuntu)",id:"disabling-system-wide-compinit-call-ubuntu",level:2},{value:"Multiple prompts",id:"multiple-prompts",level:2},{value:"Loading and unloading themes (8 examples)",id:"loading-and-unloading-themes-8-examples",level:3}],c={toc:u};function k(e){var t=e.components,n=(0,i.Z)(e,o);return(0,l.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h2",{id:"customizing-paths"},"Customizing Paths"),(0,l.kt)("p",null,"Following variables can be set to custom values, before sourcing ZI."),(0,l.kt)("p",null,"Initial ZI's hash definition:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"declare -A ZI\n")),(0,l.kt)("p",null,"Variables below has to be set before loading ZI:"),(0,l.kt)(r.Z,{mdxType:"APITable"},(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Hash Field"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"ZI[BIN_DIR]")),(0,l.kt)("td",{parentName:"tr",align:null},'Where ZI code resides, e.g: "~/.zi/bin"')),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"ZI[HOME_DIR]")),(0,l.kt)("td",{parentName:"tr",align:null},'Where ZI should create all working directories, e.g: "~/.zi"')),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"ZI[PLUGINS_DIR]")),(0,l.kt)("td",{parentName:"tr",align:null},'Override single working directory \u2013 for plugins, e.g: "/opt/zsh/zi/plugins"')),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"ZI[COMPLETIONS_DIR]")),(0,l.kt)("td",{parentName:"tr",align:null},'As above, but for completion files, e.g: "/opt/zsh/zi/root_completions"')),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"ZI[SNIPPETS_DIR]")),(0,l.kt)("td",{parentName:"tr",align:null},"As above, but for snippets")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"ZI[ZMODULES_DIR]")),(0,l.kt)("td",{parentName:"tr",align:null},'Override single working directory \u2013 for Zsh modules e.g: "/opt/zsh/zi/zmodules"')),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"ZI[ZCOMPDUMP_PATH]")),(0,l.kt)("td",{parentName:"tr",align:null},"Path to ",(0,l.kt)("inlineCode",{parentName:"td"},".zcompdump")," file, with the file included (e.g: its name can be different)")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"ZI[COMPINIT_OPTS]")),(0,l.kt)("td",{parentName:"tr",align:null},"Options for ",(0,l.kt)("inlineCode",{parentName:"td"},"compinit")," call (e.g: done by ",(0,l.kt)("inlineCode",{parentName:"td"},"zicompinit"),"), use to pass -C to speed up loading")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"ZI[MUTE_WARNINGS]")),(0,l.kt)("td",{parentName:"tr",align:null},"If set to ",(0,l.kt)("inlineCode",{parentName:"td"},"1"),", then mutes some of the ZI warnings, specifically the ",(0,l.kt)("inlineCode",{parentName:"td"},"plugin already registered")," warning")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"ZI[OPTIMIZE_OUT_DISK_ACCESSES]")),(0,l.kt)("td",{parentName:"tr",align:null},"If set to ",(0,l.kt)("inlineCode",{parentName:"td"},"1"),", then ZI will skip checking if a Turbo-loaded object exists on the disk. By default, ZI skips Turbo for non-existing objects (plugins or snippets) to install them before the first prompt \u2013 without any delays, during the normal processing of ",(0,l.kt)("inlineCode",{parentName:"td"},"zshrc"),". This option can give a performance gain of about 10 ms out of 150 ms (e.g: Zsh will start-up in 140 ms instead of 150 ms).")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"$ZPFX")),(0,l.kt)("td",{parentName:"tr",align:null},"set by default to ",(0,l.kt)("inlineCode",{parentName:"td"},"~/.zi/polaris"),", a directory where software with ",(0,l.kt)("inlineCode",{parentName:"td"},"Makefile"),", etc. can be pointed to, by e.g. ",(0,l.kt)("inlineCode",{parentName:"td"},"atclone'./configure --prefix=$ZPFX'"),"."))))),(0,l.kt)("h2",{id:"non-github-local-plugins"},"Non-GitHub (Local) Plugins"),(0,l.kt)("p",null,"Use ",(0,l.kt)("inlineCode",{parentName:"p"},"create")," subcommand with user name ",(0,l.kt)("inlineCode",{parentName:"p"},"_local")," (the default) to create the plugin's skeleton in ",(0,l.kt)("inlineCode",{parentName:"p"},"$ZI[PLUGINS_DIR]"),". It\nwill be not connected with the GitHub repository (because of the user name being ",(0,l.kt)("inlineCode",{parentName:"p"},"_local"),"). To enter the plugin's\ndirectory use the ",(0,l.kt)("inlineCode",{parentName:"p"},"cd")," command with just the plugin's name (without ",(0,l.kt)("inlineCode",{parentName:"p"},"_local"),", it's optional)."),(0,l.kt)("p",null,"If the user name will not be ",(0,l.kt)("inlineCode",{parentName:"p"},"_local"),", then ZI will create a repository also on GitHub and set up the correct repository\norigin."),(0,l.kt)("h2",{id:"extending-git"},"Extending Git"),(0,l.kt)("p",null,"Several projects provide git extensions. Installing them with ZI has many benefits:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"all files are under ",(0,l.kt)("inlineCode",{parentName:"li"},"$HOME")," \u2013 no administrator rights needed,"),(0,l.kt)("li",{parentName:"ul"},"declarative setup (like Chef or Puppet) \u2013 copying ",(0,l.kt)("inlineCode",{parentName:"li"},".zshrc")," to a different account brings also git-related setup,"),(0,l.kt)("li",{parentName:"ul"},"easy update by e.g: ",(0,l.kt)("inlineCode",{parentName:"li"},"zi update --all"),".")),(0,l.kt)("p",null,"Below is a configuration that adds multiple git extensions, loaded in Turbo mode, 1 second after prompt, with use of the\n",(0,l.kt)("a",{parentName:"p",href:"https://github.com/z-shell/z-a-bin-gem-node"},"bin-gem-node")," annex:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell",metastring:'title="~/.zshrc"',title:'"~/.zshrc"'},'zi as"null" wait"1" lucid for \\\n    sbin    Fakerr/git-recall \\\n    sbin    cloneopts paulirish/git-open \\\n    sbin    paulirish/git-recent \\\n    sbin    davidosomething/git-my \\\n    sbin atload"export _MENU_THEME=legacy" \\\n            arzzen/git-quick-stats \\\n    sbin    iwata/git-now \\\n    make"PREFIX=$ZPFX install" \\\n            tj/git-extras \\\n    sbin"bin/git-dsf;bin/diff-so-fancy" \\\n            z-shell/zsh-diff-so-fancy \\\n    sbin"git-url;git-guclone" make"GITURL_NO_CGITURL=1" \\\n            z-shell/git-url\n')),(0,l.kt)("p",null,"The target directory for installed files is ",(0,l.kt)("inlineCode",{parentName:"p"},"$ZPFX")," - ",(0,l.kt)("inlineCode",{parentName:"p"},"~/.zi/polaris")," by default."),(0,l.kt)("p",null,"With ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/z-shell/zi/wiki/z-a-meta-plugins"},"meta-plugins")," consisting of:"),(0,l.kt)("p",null,"Annexes:"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("a",{parentName:"li",href:"https://github.com/z-shell/z-a-readurl"},"z-shell/z-a-readurl"),","),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("a",{parentName:"li",href:"https://github.com/z-shell/z-a-patch-dl"},"z-shell/z-a-patch-dl"),","),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("a",{parentName:"li",href:"https://github.com/z-shell/z-a-rust"},"z-shell/z-a-rust"),","),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("a",{parentName:"li",href:"https://github.com/z-shell/z-a-bin-gem-node"},"z-shell/z-a-bin-gem-node"),".")),(0,l.kt)("p",null,"Git tools:"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("a",{parentName:"li",href:"https://github.com/paulirish/git-open"},"paulirish/git-open"),","),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("a",{parentName:"li",href:"https://github.com/paulirish/git-recent"},"paulirish/git-recent"),","),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("a",{parentName:"li",href:"https://github.com/davidosomething/git-my"},"davidosomething/git-my"),","),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("a",{parentName:"li",href:"https://github.com/arzzen/git-quick-stats"},"arzzen/git-quick-stats"),","),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("a",{parentName:"li",href:"https://github.com/iwata/git-now"},"iwata/git-now"),","),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("a",{parentName:"li",href:"https://github.com/tj/git-extras"},"tj/git-extras"),","),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("a",{parentName:"li",href:"https://github.com/wfxr/forgit"},"wfxr/forgit"),".")),(0,l.kt)("p",null,"just run:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"zi light-mode for z-shell/z-a-meta-plugins @annexes @ext-git\n")),(0,l.kt)("h2",{id:"zsh-options-setopt"},"Zsh options ",(0,l.kt)("inlineCode",{parentName:"h2"},"setopt")),(0,l.kt)("p",null,"Options are primarily referred to by name. These names are case insensitive and underscores are ignored. For example,\n",(0,l.kt)("inlineCode",{parentName:"p"},"allexport")," is equivalent to ",(0,l.kt)("inlineCode",{parentName:"p"},"A__lleXP_ort"),"."),(0,l.kt)("p",null,"The sense of an option name may be inverted by preceding it with ",(0,l.kt)("inlineCode",{parentName:"p"},"no"),", so ",(0,l.kt)("inlineCode",{parentName:"p"},"setopt No_Beep")," is equivalent to\n",(0,l.kt)("inlineCode",{parentName:"p"},"unsetopt beep"),". This inversion can only be done once, so ",(0,l.kt)("inlineCode",{parentName:"p"},"nonobeep")," is not a synonym for ",(0,l.kt)("inlineCode",{parentName:"p"},"beep"),". Similarly, ",(0,l.kt)("inlineCode",{parentName:"p"},"tify")," is\nnot a synonym for ",(0,l.kt)("inlineCode",{parentName:"p"},"nonotify")," (the inversion of ",(0,l.kt)("inlineCode",{parentName:"p"},"notify"),")."),(0,l.kt)("p",null,"Some options also have one or more single letter names. There are two sets of single letter options: one used by\ndefault, and another used to emulate sh/ksh (used when the SH_OPTION_LETTERS option is set). The single letter options\ncan be used on the shell command line, or with the set, setopt and unsetopt builtins, as normal Unix options preceded by\n",(0,l.kt)("inlineCode",{parentName:"p"},"-"),"."),(0,l.kt)("p",null,"The sense of the single letter options may be inverted by using ",(0,l.kt)("inlineCode",{parentName:"p"},"+")," instead of ",(0,l.kt)("inlineCode",{parentName:"p"},"-"),". Some of the single letter option\nnames refer to an option being off, in which case the inversion of that name refers to the option being on. For example,\n",(0,l.kt)("inlineCode",{parentName:"p"},"+n")," is the short name of ",(0,l.kt)("inlineCode",{parentName:"p"},"exec"),", and ",(0,l.kt)("inlineCode",{parentName:"p"},"-n")," is the short name of its inversion, ",(0,l.kt)("inlineCode",{parentName:"p"},"noexec"),"."),(0,l.kt)("p",null,"In strings of single letter options supplied to the shell at startup, trailing whitespace will be ignored; for example\nthe string ",(0,l.kt)("inlineCode",{parentName:"p"},"-f")," will be treated just as ",(0,l.kt)("inlineCode",{parentName:"p"},"-f"),", but the string ",(0,l.kt)("inlineCode",{parentName:"p"},"-f i")," is an error."),(0,l.kt)("p",null,"This is because many systems which implement the ",(0,l.kt)("inlineCode",{parentName:"p"},"#!")," mechanism for calling scripts do not strip trailing whitespace."),(0,l.kt)("h3",{id:"history-optimization"},"History optimization"),(0,l.kt)(r.Z,{mdxType:"APITable"},(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Option"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"setopt")," ",(0,l.kt)("inlineCode",{parentName:"td"},"hist_ignore_all_dups")),(0,l.kt)("td",{parentName:"tr",align:null},"Remove older duplicate entries from history.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"setopt")," ",(0,l.kt)("inlineCode",{parentName:"td"},"hist_expire_dups_first")),(0,l.kt)("td",{parentName:"tr",align:null},"Expire A Duplicate Event First When Trimming History.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"setopt")," ",(0,l.kt)("inlineCode",{parentName:"td"},"hist_ignore_dups")),(0,l.kt)("td",{parentName:"tr",align:null},"Do Not Record An Event That Was Just Recorded Again.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"setopt")," ",(0,l.kt)("inlineCode",{parentName:"td"},"hist_reduce_blanks")),(0,l.kt)("td",{parentName:"tr",align:null},"Remove superfluous blanks from history items.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"setopt")," ",(0,l.kt)("inlineCode",{parentName:"td"},"hist_find_no_dups")),(0,l.kt)("td",{parentName:"tr",align:null},"Do Not Display A Previously Found Event.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"setopt")," ",(0,l.kt)("inlineCode",{parentName:"td"},"hist_ignore_space")),(0,l.kt)("td",{parentName:"tr",align:null},"Do Not Record An Event Starting With A Space.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"setopt")," ",(0,l.kt)("inlineCode",{parentName:"td"},"hist_save_no_dups")),(0,l.kt)("td",{parentName:"tr",align:null},"Do Not Write A Duplicate Event To The History File.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"setopt")," ",(0,l.kt)("inlineCode",{parentName:"td"},"hist_verify")),(0,l.kt)("td",{parentName:"tr",align:null},"Do Not Execute Immediately Upon History Expansion.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"setopt")," ",(0,l.kt)("inlineCode",{parentName:"td"},"append_history")),(0,l.kt)("td",{parentName:"tr",align:null},"Allow multiple terminal sessions to all append to one zsh command history.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"setopt")," ",(0,l.kt)("inlineCode",{parentName:"td"},"extended_history")),(0,l.kt)("td",{parentName:"tr",align:null},"Show Timestamp In History.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"setopt")," ",(0,l.kt)("inlineCode",{parentName:"td"},"inc_append_history")),(0,l.kt)("td",{parentName:"tr",align:null},"Write To The History File Immediately, Not When The Shell Exits.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"setopt")," ",(0,l.kt)("inlineCode",{parentName:"td"},"share_history")),(0,l.kt)("td",{parentName:"tr",align:null},"Share history between different instances of the shell"))))),(0,l.kt)("h3",{id:"other-tweaks"},"Other tweaks"),(0,l.kt)(r.Z,{mdxType:"APITable"},(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Option"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"setopt")," ",(0,l.kt)("inlineCode",{parentName:"td"},"bang_hist")),(0,l.kt)("td",{parentName:"tr",align:null},"Treat The '!' Character Specially During Expansion.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"setopt")," ",(0,l.kt)("inlineCode",{parentName:"td"},"multios")),(0,l.kt)("td",{parentName:"tr",align:null},"Perform implicit tees or cats when multiple redirections are attempted.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"setopt")," ",(0,l.kt)("inlineCode",{parentName:"td"},"interactive_comments")),(0,l.kt)("td",{parentName:"tr",align:null},"Allow comments even in interactive shells (especially for Muness).")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"setopt")," ",(0,l.kt)("inlineCode",{parentName:"td"},"pushd_ignore_dups")),(0,l.kt)("td",{parentName:"tr",align:null},"Don't push multiple copies of the same directory onto the directory stack.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"setopt")," ",(0,l.kt)("inlineCode",{parentName:"td"},"auto_cd")),(0,l.kt)("td",{parentName:"tr",align:null},"Use cd by typing directory name if it's not a command.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"setopt")," ",(0,l.kt)("inlineCode",{parentName:"td"},"no_beep")),(0,l.kt)("td",{parentName:"tr",align:null},"Don't beep on error.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"setopt")," ",(0,l.kt)("inlineCode",{parentName:"td"},"auto_list")),(0,l.kt)("td",{parentName:"tr",align:null},"Automatically list choices on ambiguous completion.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"setopt")," ",(0,l.kt)("inlineCode",{parentName:"td"},"auto_pushd")),(0,l.kt)("td",{parentName:"tr",align:null},"Make cd push the old directory onto the directory stack.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"setopt")," ",(0,l.kt)("inlineCode",{parentName:"td"},"pushdminus")),(0,l.kt)("td",{parentName:"tr",align:null},"Swapped the meaning of cd +1 and cd -1; we want them to mean the opposite of what they mean.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"setopt")," ",(0,l.kt)("inlineCode",{parentName:"td"},"promptsubst")),(0,l.kt)("td",{parentName:"tr",align:null},"Enables the substitution of parameters inside the prompt each time the prompt is drawn."))))),(0,l.kt)("h2",{id:"style-control-for-the-completion-system-zstyle"},"Style control for the completion system ",(0,l.kt)("inlineCode",{parentName:"h2"},"zstyle")),(0,l.kt)("p",null,"What does ",(0,l.kt)("inlineCode",{parentName:"p"},"zstyle")," do? - ",(0,l.kt)("a",{parentName:"p",href:"https://unix.stackexchange.com/questions/214657/what-does-zstyle-do/239980"},"unix.stackexchange.com/what-does-zstyle-do")),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"zstyle")," handles the obvious style control for the completion system, but it seems to cover more than just that."),(0,l.kt)("p",null,"E.g., the vcs_info module relies on it for display of git status in your prompt."),(0,l.kt)("p",null,"You can start by looking at the few explanatory paragraphs in ",(0,l.kt)("inlineCode",{parentName:"p"},"man zshmodules")," in the ",(0,l.kt)("inlineCode",{parentName:"p"},"zstyle")," section."),(0,l.kt)("h3",{id:"fuzzy-matching-of-completions"},"Fuzzy matching of completions"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell",metastring:'title="~/.zshrc"',title:'"~/.zshrc"'},"zstyle ':completion:*' completer _complete _match _approximate\nzstyle ':completion:*:match:*' original only\nzstyle -e ':completion:*:approximate:*' max-errors 'reply=($((($#PREFIX+$#SUFFIX)/3>7?7:($#PREFIX+$#SUFFIX)/3))numeric)'\n")),(0,l.kt)("h3",{id:"pretty-completions"},"Pretty completions"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell",metastring:'title="~/.zshrc"',title:'"~/.zshrc"'},"zstyle ':completion:*:matches' group 'yes'\nzstyle ':completion:*:options' description 'yes'\nzstyle ':completion:*:options' auto-description '%d'\nzstyle ':completion:*:corrections' format ' %F{green}-- %d (errors: %e) --%f'\nzstyle ':completion:*:descriptions' format ' %F{yellow}-- %d --%f'\nzstyle ':completion:*:messages' format ' %F{purple} -- %d --%f'\nzstyle ':completion:*:warnings' format ' %F{red}-- no matches found --%f'\nzstyle ':completion:*:default' list-prompt '%S%M matches%s'\nzstyle ':completion:*' format ' %F{yellow}-- %d --%f'\nzstyle ':completion:*' group-name ''\nzstyle ':completion:*' verbose yes\nzstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}' 'r:|[._-]=* r:|=*' 'l:|=* r:|=*'\nzstyle ':completion:*:functions' ignored-patterns '(_*|pre(cmd|exec))'\nzstyle ':completion:*' use-cache true\nzstyle ':completion:*' rehash true\n")),(0,l.kt)("h3",{id:"do-menu-driven-completion"},"Do menu-driven completion"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"zstyle ':completion:*' menu select\n")),(0,l.kt)("h3",{id:"color-completion-for-some-things"},"Color completion for ",(0,l.kt)("a",{parentName:"h3",href:"https://linuxshellaccount.blogspot.com/2008/12/color-completion-using-zsh-modules-on.html"},"some things")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}\n")),(0,l.kt)("h2",{id:"disabling-system-wide-compinit-call-ubuntu"},"Disabling System-Wide ",(0,l.kt)("inlineCode",{parentName:"h2"},"compinit")," Call (Ubuntu)"),(0,l.kt)("p",null,"On Ubuntu users might get surprised that e.g. their completions work while they didn't call ",(0,l.kt)("inlineCode",{parentName:"p"},"compinit")," in their\n",(0,l.kt)("inlineCode",{parentName:"p"},".zshrc"),"."),(0,l.kt)("p",null,"That's because the function is being called in ",(0,l.kt)("inlineCode",{parentName:"p"},"/etc/zshrc"),"."),(0,l.kt)("p",null,"To disable this call \u2013 what is needed to avoid the slowdown and if the user loads any completion-equipped plugins, i.e.\nalmost on 100% \u2013 add the following line to ",(0,l.kt)("inlineCode",{parentName:"p"},"~/.zshenv")," to skip the not helping Ubuntu global compinit:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell",metastring:'title="~/.zshenv"',title:'"~/.zshenv"'},"skip_global_compinit=1\n")),(0,l.kt)("h2",{id:"multiple-prompts"},"Multiple prompts"),(0,l.kt)(r.Z,{mdxType:"APITable"},(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Syntax"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"load'\u2026'")),(0,l.kt)("td",{parentName:"tr",align:"left"},"condition that when fulfilled will cause plugin to be loaded.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"unload'\u2026'")),(0,l.kt)("td",{parentName:"tr",align:"left"},"as above, but will unload plugin."))))),(0,l.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,l.kt)("div",{parentName:"div",className:"admonition-heading"},(0,l.kt)("h5",{parentName:"div"},(0,l.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,l.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,l.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,l.kt)("div",{parentName:"div",className:"admonition-content"},(0,l.kt)("p",{parentName:"div"},(0,l.kt)("inlineCode",{parentName:"p"},"zi light \u2026")," loads the plugin without tracking it, while ",(0,l.kt)("inlineCode",{parentName:"p"},"zi load")," tracks the plugin. To be able unload the plugin, it\nhas to be loaded with ",(0,l.kt)("inlineCode",{parentName:"p"},"zi load \u2026")," instead of ",(0,l.kt)("inlineCode",{parentName:"p"},"zi light \u2026"),"."))),(0,l.kt)(r.Z,{mdxType:"APITable"},(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Syntax"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"atload'!\u2026'")),(0,l.kt)("td",{parentName:"tr",align:"left"},"run the ",(0,l.kt)("inlineCode",{parentName:"td"},"precmd")," hooks to make the prompts fully initialized when loaded in the middle of the prompt.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"precmd")),(0,l.kt)("td",{parentName:"tr",align:"left"},"hooks are being normally run before each ",(0,l.kt)("strong",{parentName:"td"},"new")," prompt."))))),(0,l.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,l.kt)("div",{parentName:"div",className:"admonition-heading"},(0,l.kt)("h5",{parentName:"div"},(0,l.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,l.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,l.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,l.kt)("div",{parentName:"div",className:"admonition-content"},(0,l.kt)("p",{parentName:"div"},"Exclamation mark causes the effects of the functions to be tracked."))),(0,l.kt)("p",null,"To allow better unloading, conditions are checked every second, you can use conditions like:"),(0,l.kt)(r.Z,{mdxType:"APITable"},(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Condition"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"![[ $PWD == *github* ]]")),(0,l.kt)("td",{parentName:"tr",align:"left"},"Change prompt after changing directory to ",(0,l.kt)("inlineCode",{parentName:"td"},"*github*"),".")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"![[ $MYPROMPT = 1 ]]")),(0,l.kt)("td",{parentName:"tr",align:"left"},"Change prompt when variable ",(0,l.kt)("inlineCode",{parentName:"td"},"MYPROMPT = 1")," is true.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"![[ \u2026 ]]")),(0,l.kt)("td",{parentName:"tr",align:"left"},"The exclamation mark causes prompt to be reset after loading or unloading the plugin ",(0,l.kt)("inlineCode",{parentName:"td"},"pick'/dev/null'")," \u2013 disable sourcing of the default-found file.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"multisrc'\u2026'")),(0,l.kt)("td",{parentName:"tr",align:"left"},"Source multiple files.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"lucid")),(0,l.kt)("td",{parentName:"tr",align:"left"},"Don't show the under-prompt message that says e.g: ",(0,l.kt)("inlineCode",{parentName:"td"},"Loaded geometry-zsh/geometry"),".")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"nocd")),(0,l.kt)("td",{parentName:"tr",align:"left"},"Don't cd into the plugin's directory when executing the ",(0,l.kt)("inlineCode",{parentName:"td"},"atload'\u2026'"),".")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"atload'\u2026'")),(0,l.kt)("td",{parentName:"tr",align:"left"},"This ice can make the path that's displayed by the theme to point to that directory."))))),(0,l.kt)("h3",{id:"loading-and-unloading-themes-8-examples"},"Loading and unloading themes (8 examples)"),(0,l.kt)("p",null,"1 - zprompts"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"zi lucid \\\n  load'![[ $MYPROMPT = 1 ]]' \\\n  unload'![[ $MYPROMPT != 1 ]]' \\\n  atload'!promptinit; typeset -g PSSHORT=0; prompt sprint3 yellow red green blue' nocd for \\\n    z-shell/zprompts\n")),(0,l.kt)("p",null,"2 \u2013 lambda-mod-zsh-theme"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"zi lucid load'![[ $MYPROMPT = 2 ]]' unload'![[ $MYPROMPT != 2 ]]' nocd for \\\n    halfo/lambda-mod-zsh-theme\n")),(0,l.kt)("p",null,"3 \u2013 lambda-gitster"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"zi lucid load'![[ $MYPROMPT = 3 ]]' unload'![[ $MYPROMPT != 3 ]]' nocd for \\\n    ergenekonyigit/lambda-gitster\n")),(0,l.kt)("p",null,"4 \u2013 geometry"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"zi lucid load'![[ $MYPROMPT = 4 ]]' unload'![[ $MYPROMPT != 4 ]]' \\\n  atload'!geometry::prompt' nocd \\\n  atinit'GEOMETRY_COLOR_DIR=63 GEOMETRY_PATH_COLOR=63' for \\\n    geometry-zsh/geometry\n")),(0,l.kt)("p",null,"5 \u2013 pure"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"zi lucid load'![[ $MYPROMPT = 5 ]]' unload'![[ $MYPROMPT != 5 ]]' \\\n  pick\"/dev/null\" multisrc\"{async,pure}.zsh\" atload'!prompt_pure_precmd' nocd for \\\n    sindresorhus/pure\n")),(0,l.kt)("p",null,"6 - agkozak-zsh-theme"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"zi lucid load'![[ $MYPROMPT = 6 ]]' unload'![[ $MYPROMPT != 6 ]]' \\\n  atload'!_agkozak_precmd' nocd atinit'AGKOZAK_FORCE_ASYNC_METHOD=subst-async' for \\\n    agkozak/agkozak-zsh-theme\n")),(0,l.kt)("p",null,"7 - zinc"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"zi load'![[ $MYPROMPT = 7 ]]' unload'![[ $MYPROMPT != 7 ]]' \\\n  compile\"{zinc_functions/*,segments/*,zinc.zsh}\" nocompletions \\\n  atload'!prompt_zinc_setup; prompt_zinc_precmd' nocd for \\\n    robobenklein/zinc\n")),(0,l.kt)("p",null,"8 - git-prompt"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"zi lucid load'![[ $MYPROMPT = 8 ]]' unload'![[ $MYPROMPT != 8 ]]' \\\n  atload'!_zsh_git_prompt_precmd_hook' nocd for \\\n    woefe/git-prompt.zsh\n")))}k.isMDXComponent=!0}}]);