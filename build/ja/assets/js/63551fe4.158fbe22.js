"use strict";(self.webpackChunkzw=self.webpackChunkzw||[]).push([[4722],{9613:function(e,t,n){n.d(t,{Zo:function(){return m},kt:function(){return c}});var a=n(9496);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},m=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,p=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),u=s(n),c=o,h=u["".concat(p,".").concat(c)]||u[c]||d[c]||i;return n?a.createElement(h,r(r({ref:t},m),{},{components:n})):a.createElement(h,r({ref:t},m))}));function c(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,r=new Array(i);r[0]=u;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:o,r[1]=l;for(var s=2;s<i;s++)r[s]=n[s];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},7212:function(e,t,n){n.r(t),n.d(t,{assets:function(){return m},contentTitle:function(){return p},default:function(){return c},frontMatter:function(){return l},metadata:function(){return s},toc:function(){return d}});var a=n(2182),o=n(9028),i=(n(9496),n(9613)),r=["components"],l={id:"annexes",slug:"/ecosystem/annexes",title:"\ud83d\udca0 Quick overview",image:"zw/logo/320x320.png",description:"Annexes documentation",keywords:["zannex"]},p=void 0,s={unversionedId:"ecosystem/annexes/annexes",id:"ecosystem/annexes/annexes",title:"\ud83d\udca0 Quick overview",description:"Annexes documentation",source:"@site/docs/ecosystem/annexes/01_0_annexes_guide.md",sourceDirName:"ecosystem/annexes",slug:"/ecosystem/annexes",permalink:"/ja/docs/ecosystem/annexes",editUrl:"https://digitalclouds.crowdin.com/z-shell/ja",tags:[],version:"current",lastUpdatedBy:"Salvydas Lukosius",lastUpdatedAt:1645977796,formattedLastUpdatedAt:"2022/2/27",frontMatter:{id:"annexes",slug:"/ecosystem/annexes",title:"\ud83d\udca0 Quick overview",image:"zw/logo/320x320.png",description:"Annexes documentation",keywords:["zannex"]},sidebar:"autoSideBar_1",previous:{title:"\ud83d\udd3a Themes",permalink:"/ja/docs/gallery/collection/themes"},next:{title:"\ud83d\udca0 Bin Gem Node",permalink:"/ja/docs/ecosystem/annexes/bin-gem-node"}},m={},d=[{value:"What Are They?",id:"what-are-they",level:2},{value:"What Can They Do?",id:"what-can-they-do",level:2},{value:"Annex recommendation",id:"annex-recommendation",level:2},{value:"Required for default functionality:",id:"required-for-default-functionality",level:3},{value:"Recommeded for additional functionality:",id:"recommeded-for-additional-functionality",level:3},{value:"How To Code Them?",id:"how-to-code-them",level:2},{value:"Details",id:"details",level:2}],u={toc:d};function c(e){var t=e.components,n=(0,o.Z)(e,r);return(0,i.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"what-are-they"},"What Are They?"),(0,i.kt)("p",null,"They are ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/z-shell/zannexes"},"extensions")," which increase functionality. Annexes can extend the\nfunctionality without adding unnecessary code to main application."),(0,i.kt)("h2",{id:"what-can-they-do"},"What Can They Do?"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Add a new ZI subcommand (i.e. the ",(0,i.kt)("a",{parentName:"p",href:"/docs/guides/commands"},"command")," that\u2019s placed after the function ",(0,i.kt)("inlineCode",{parentName:"p"},"zi \u2026")," when\ncalling ZI).")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Add new ",(0,i.kt)("a",{parentName:"p",href:"/docs/guides/syntax/ice-modifiers"},"ice-modifiers"),".")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Register four type of hooks:"),(0,i.kt)("p",{parentName:"li"},"3.1. ",(0,i.kt)("inlineCode",{parentName:"p"},"atclone")," hook \u2013 run after cloning any plugin or downloading any snippet."),(0,i.kt)("p",{parentName:"li"},"3.2. ",(0,i.kt)("inlineCode",{parentName:"p"},"atpull")," hook \u2013 run after pulling new commits (i.e. updating) for any plugin / snippet."),(0,i.kt)("p",{parentName:"li"},"3.3. ",(0,i.kt)("inlineCode",{parentName:"p"},"atinit")," hook \u2013 run before loading any plugin / snippet, after it has been set-up (i.e. downloaded)."),(0,i.kt)("p",{parentName:"li"},"3.4. ",(0,i.kt)("inlineCode",{parentName:"p"},"atload")," hook \u2013 run after loading any plugin / snippet.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Register hooks for generating help text, shown by the ",(0,i.kt)("inlineCode",{parentName:"p"},"zi help")," subcommand."))),(0,i.kt)("h2",{id:"annex-recommendation"},"Annex recommendation"),(0,i.kt)("h3",{id:"required-for-default-functionality"},"Required for default functionality:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/z-shell/z-a-bin-gem-node"},"z-a-bin-gem-node")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/z-shell/z-a-readurl"},"z-a-readurl")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/z-shell/z-a-patch-dl"},"z-a-patch-dl")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/z-shell/z-a-rust"},"z-a-rust"))),(0,i.kt)("h3",{id:"recommeded-for-additional-functionality"},"Recommeded for additional functionality:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/z-shell/z-a-submods"},"z-a-submods")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/z-shell/z-a-unscope"},"z-a-unscope"))),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"Install annexes as ",(0,i.kt)("a",{parentName:"p",href:"/docs/ecosystem/annexes/meta-plugins"},"meta plugin")),(0,i.kt)("p",{parentName:"div"},"All required:"),(0,i.kt)("pre",{parentName:"div"},(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"zi light-mode for z-shell/z-a-meta-plugins @annexes\n")),(0,i.kt)("p",{parentName:"div"},"All required + recommended:"),(0,i.kt)("pre",{parentName:"div"},(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"zi light-mode for z-shell/z-a-meta-plugins @annexes+rec\n")))),(0,i.kt)("h2",{id:"how-to-code-them"},"How To Code Them?"),(0,i.kt)("p",null,"Below is an example body of an ",(0,i.kt)("inlineCode",{parentName:"p"},"atclone")," hook (taken from ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/z-shell/z-a-submods"},(0,i.kt)("strong",{parentName:"a"},"submods"))," annex)."),(0,i.kt)("p",null,"It shows how to:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Obtain the arguments passed to the hook.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Use an ",(0,i.kt)("a",{parentName:"p",href:"/docs/guides/syntax/ice-modifiers"},"ice-modifier"),".")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"It also shows an useful snippet that will trim the whitespace in array elements (see ",(0,i.kt)("inlineCode",{parentName:"p"},"# (4) \u2026")," in the code).")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Utilize the last hook argument \u2013 the plugin\u2019s/snippet\u2019s containing directory."))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},'emulate -L zsh -o extendedglob -o warncreateglobal -o typesetsilent\n\n[[ -z "${ZI_ICE[submods]}" ]] && return 0\n\n# (1) \u2013 get arguments\n[[ "$1" = plugin ]] && \\\n  local type="$1" user="$2" plugin="$3" id_as="$4" dir="$5" hook="$6" || \\\n  local type="$1" url="$2" id_as="$3" dir="$4" hook="$6" # type: snippet\n\n# (2) \u2013 we\'re interested only in plugins/snippets\n# which have the submods\'\' ice in their load command\n[[ -z ${ZI_ICE[submods]} ]] && return 0\n\nlocal -a mods parts\nlocal mod\n\n# (3) \u2013 process the submods\'\' ice\nmods=( ${(@s.;.)ZI_ICE[submods]} )\nfor mod in "${mods[@]}"; do\n    parts=( "${(@s:->:)mod}" )\n    # (4) Remove only leading and trailing whitespace\n    parts=( "${parts[@]//((#s)[[:space:]]##|[[:space:]]##(#e))/}" )\n\n    print "\\nCloning submodule: ${parts[1]} to dir: ${parts[2]}"\n    parts[1]="https://github.com/${parts[1]}"\n    # (5) \u2013 the use of the input argument: `$dir\'\n    command git -C "$dir" clone --progress "${parts[1]}" "${parts[2]}"\ndone\n')),(0,i.kt)("p",null,"The recommended method of creating a hook is to place its body into a file that starts with a right arrow ",(0,i.kt)("inlineCode",{parentName:"p"},"\u2192"),"\n(",(0,i.kt)("a",{parentName:"p",href:"https://z-shell.github.io/docs/zsh/Zsh-Plugin-Standard.html#_the_proposed_function_name_prefixes"},"more information"),",\nand also a ",(0,i.kt)("inlineCode",{parentName:"p"},"za-")," prefix, e.g. ",(0,i.kt)("inlineCode",{parentName:"p"},"\u2192za-myproject-atclone-hook")," and then to mark it for autoloading via\n",(0,i.kt)("inlineCode",{parentName:"p"},"autoload -Uz \u2192za-myproject-atclone-hook"),". Then register the hook (presumably in the ",(0,i.kt)("inlineCode",{parentName:"p"},"myproject.plugin.zsh")," file) with\nthe API call:"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"@zi-register-annex"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"@zi-register-annex myproject hook:atclone \\\n  \u2192za-myproject-atclone-handler \\\n  \u2192za-myproject-atclone-help-handler \\\n  \"submods''\" # register a new ice-mod: submods''\n")),(0,i.kt)("p",null,"The general syntax of the API call is:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},'@zi-register-annex {project-name} \\\n  {hook: \\\n  {name-of-the-handler-function} \\\n  {name-of-the-HELP-handler-function} \\\n  "{ice-mod1}|{ice-mod2}|\u2026" < hook-type >| subcommand: < new-subcommand-name > }\n')),(0,i.kt)("p",null,"The last argument, i.e. the ",(0,i.kt)("inlineCode",{parentName:"p"},"|"),"-separated ice-list, is optional. That\u2019s all","!"," After this loading the plugin ",(0,i.kt)("inlineCode",{parentName:"p"},"myproject"),"\nwill set up the new ",(0,i.kt)("a",{parentName:"p",href:"/docs/guides/syntax/ice-modifiers"},"ice-modifier")," ",(0,i.kt)("inlineCode",{parentName:"p"},"submods")," that will have syntax\n",(0,i.kt)("inlineCode",{parentName:"p"},"submods'{user}/{plugin} \u2013> {output-dir}; \u2026'")," and will clone submodules when installing the original plugin or snippet","!","\nExample real-world use of the ice-mod:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"# Load the `zsh-autosuggestions' plugin via Prezto module: `autosuggestions'\nzi ice svn submods'zsh-users/zsh-autosuggestions -> external'\nzi snippet PZT::modules/autosuggestions\n")),(0,i.kt)("p",null,"Checkout the project which fully implements this idea, ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/z-shell/z-a-submods"},(0,i.kt)("strong",{parentName:"a"},"z-a-submods")),". It\ne.g. also implements the ",(0,i.kt)("inlineCode",{parentName:"p"},"atpull")," hook, i.e. supports automatic update of the submodules. The ",(0,i.kt)("inlineCode",{parentName:"p"},"z-a-*")," prefix is\nrecommended for projects that are being annexes."),(0,i.kt)("h2",{id:"details"},"Details"),(0,i.kt)("p",null,"There are 2 or 3 subtypes for each of the hook:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"atinit")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"!atinit")," \u2013 the ",(0,i.kt)("inlineCode",{parentName:"p"},"!")," version is ran before the ",(0,i.kt)("inlineCode",{parentName:"p"},"atinit")," ",(0,i.kt)("strong",{parentName:"p"},"ice-mod")," (i.e. before\n",(0,i.kt)("inlineCode",{parentName:"p"},"zi ice atinit'echo this!'; \u2026"),"), while the normal version runs after it.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"atload")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"!atload")," \u2013 analogous to the ",(0,i.kt)("inlineCode",{parentName:"p"},"atinit")," case: the ",(0,i.kt)("inlineCode",{parentName:"p"},"!")," version runs before the ",(0,i.kt)("inlineCode",{parentName:"p"},"atload")," ",(0,i.kt)("strong",{parentName:"p"},"ice-mod")," (while\nthe normal version runs after it).")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"atclone")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"!atclone")," \u2013 analogous to the ",(0,i.kt)("inlineCode",{parentName:"p"},"atinit")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"atload")," cases.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"atpull"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"!atpull")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"%atpull")," \u2013 the first two are being ran ",(0,i.kt)("strong",{parentName:"p"},"only when there are new commits to be downloaded"),"\nduring the update. The ",(0,i.kt)("inlineCode",{parentName:"p"},"%")," version is being ",(0,i.kt)("strong",{parentName:"p"},"always")," run, regardless if the update will pull any actual commits or\nnot, and it is being ran ",(0,i.kt)("strong",{parentName:"p"},"after")," the ",(0,i.kt)("inlineCode",{parentName:"p"},"atpull")," ",(0,i.kt)("strong",{parentName:"p"},"ice-mod"),"."))))}c.isMDXComponent=!0}}]);