"use strict";(self.webpackChunkzw=self.webpackChunkzw||[]).push([[4108],{9613:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return u}});var i=t(9496);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,i,a=function(e,n){if(null==e)return{};var t,i,a={},l=Object.keys(e);for(i=0;i<l.length;i++)t=l[i],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(i=0;i<l.length;i++)t=l[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=i.createContext({}),d=function(e){var n=i.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},p=function(e){var n=d(e.components);return i.createElement(s.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},m=i.forwardRef((function(e,n){var t=e.components,a=e.mdxType,l=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),m=d(t),u=a,h=m["".concat(s,".").concat(u)]||m[u]||c[u]||l;return t?i.createElement(h,r(r({ref:n},p),{},{components:t})):i.createElement(h,r({ref:n},p))}));function u(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var l=t.length,r=new Array(l);r[0]=m;var o={};for(var s in n)hasOwnProperty.call(n,s)&&(o[s]=n[s]);o.originalType=e,o.mdxType="string"==typeof e?e:a,r[1]=o;for(var d=2;d<l;d++)r[d]=t[d];return i.createElement.apply(null,r)}return i.createElement.apply(null,t)}m.displayName="MDXCreateElement"},4010:function(e,n,t){t.r(n),t.d(n,{assets:function(){return p},contentTitle:function(){return s},default:function(){return u},frontMatter:function(){return o},metadata:function(){return d},toc:function(){return c}});var i=t(2182),a=t(9028),l=(t(9496),t(9613)),r=["components"],o={id:"bindkey",title:"\ud83d\uddd2 Bindkeys Map",image:"zw/logo/320x320.png",description:"The Bindmap & Bindkey ZI syntax",keywords:["syntax","how-to-use"]},s=void 0,d={unversionedId:"guides/syntax/bindkey",id:"guides/syntax/bindkey",title:"\ud83d\uddd2 Bindkeys Map",description:"The Bindmap & Bindkey ZI syntax",source:"@site/docs/guides/syntax/10_bindkey.md",sourceDirName:"guides/syntax",slug:"/guides/syntax/bindkey",permalink:"/ja/docs/guides/syntax/bindkey",editUrl:"https://digitalclouds.crowdin.com/z-shell/ja",tags:[],version:"current",lastUpdatedBy:"Salvydas Lukosius",lastUpdatedAt:1645993180,formattedLastUpdatedAt:"2022/2/27",sidebarPosition:10,frontMatter:{id:"bindkey",title:"\ud83d\uddd2 Bindkeys Map",image:"zw/logo/320x320.png",description:"The Bindmap & Bindkey ZI syntax",keywords:["syntax","how-to-use"]},sidebar:"autoSideBar_1",previous:{title:"\ud83e\uddca Ice Modifiers",permalink:"/ja/docs/guides/syntax/ice-modifiers"},next:{title:"\ud83d\udee0 Commands",permalink:"/ja/docs/guides/commands"}},p={},c=[{value:"The <code>bindmap&#39;\u2026&#39;</code> keybindings",id:"the-bindmap-keybindings",level:2},{value:"Examples for <code>bindmap&#39;\u2026&#39;</code>",id:"examples-for-bindmap",level:3},{value:"Explanation",id:"explanation",level:3},{value:"Using <code>bindmap&#39;\u2026&#39;</code> in light mode",id:"using-bindmap-in-light-mode",level:3},{value:"Using the <kbd>UPAR</kbd> shorthands",id:"using-the-upar-shorthands",level:3}],m={toc:c};function u(e){var n=e.components,t=(0,a.Z)(e,r);return(0,l.kt)("wrapper",(0,i.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,l.kt)("h2",{id:"the-bindmap-keybindings"},"The ",(0,l.kt)("inlineCode",{parentName:"h2"},"bindmap'\u2026'")," keybindings"),(0,l.kt)("p",null,"Sometimes plugins call ",(0,l.kt)("a",{parentName:"p",href:"/search/?q=binkey"},"bindkey")," to assign keyboard shortcuts. This can cause problems because multiple plugins can\nbind the same keys."),(0,l.kt)("p",null,"Also, the user might want a different binding(s), which will require complicated, additional ",(0,l.kt)("inlineCode",{parentName:"p"},"bindkey")," commands in\n",(0,l.kt)("inlineCode",{parentName:"p"},".zshrc"),"."),(0,l.kt)("p",null,"ZI provides a solution to this problem \u2013 the ability to remap the bindkeys with a short ",(0,l.kt)("a",{parentName:"p",href:"/search/?q=ice+modifier"},"ice-modifier")," specification\nwith the ",(0,l.kt)("inlineCode",{parentName:"p"},"bindmap'\u2026'")," ",(0,l.kt)("a",{parentName:"p",href:"/docs/guides/syntax/ice"},"ice"),"."),(0,l.kt)("h3",{id:"examples-for-bindmap"},"Examples for ",(0,l.kt)("inlineCode",{parentName:"h3"},"bindmap'\u2026'")),(0,l.kt)("p",null,"Map Ctrl-G instead of Ctrl-R for the history searcher."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"zi bindmap'^R -> ^G' for z-shell/history-search-multi-word\n")),(0,l.kt)("p",null,"Map Ctrl-Shift-Left and \u2026-Right used by URxvt instead of the Xterms' ones. Load with the bindkey-tracking \u2194 with\nlight-loading for anything else."),(0,l.kt)("p",null,"Could also separate the bindmaps with a semicolon, i.e.:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},'bindmap\'"\\\\e[1\\;6D" -> \\\\e[1\\;5D ; "\\\\e[1\\;6C" -> ^[[1\\;5C\' \\\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"zi wait light-mode trackbinds bindmap'\"\\\\e[1\\;6D\" -> \\\\e[1\\;5D\"' \\\n  bindmap'\"\\\\e[1\\;6C\" -> ^[[1\\;5C' pick'dircycle.zsh' for \\\n  michaelxmcbride/zsh-dircycle\n")),(0,l.kt)("p",null,"Map space to regular space and Ctrl-Space to the `globalias' widget, which expands the alias entered on the left,\nprovided by OMZ globalias plugin."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},'zi bindmap=\'!" " -> magic-space; !"^ " -> globalias\' nocompletions \\\n  depth=1 pick=plugins/globalias/globalias.plugin.zsh for \\\n  ohmyzsh/ohmyzsh\n')),(0,l.kt)("h3",{id:"explanation"},"Explanation"),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"bindmap'\u2026'")," ice has two modes of operation: normal and exclamation-mark (",(0,l.kt)("inlineCode",{parentName:"p"},"bindmap'!\u2026'"),")."),(0,l.kt)("p",null,"In the first mode, the remapping is being done from-key to-key, i.e.: ",(0,l.kt)("inlineCode",{parentName:"p"},"bindmap'fromkey -> to-key'"),"."),(0,l.kt)("p",null,"The given key is being changed to the second given key in the ",(0,l.kt)("inlineCode",{parentName:"p"},"bindkey")," command that's being issued when loading the\nplugin."),(0,l.kt)("p",null,"In the second mode, the remapping is being done from-key to-widget, e.g: ",(0,l.kt)("inlineCode",{parentName:"p"},"bindmap'!from-key -> to-widget'"),"."),(0,l.kt)("p",null,"In this mode, the given key is being mapped to the given widget instead of the widget specified in the ",(0,l.kt)("inlineCode",{parentName:"p"},"bindkey")," command\ne.g.:"),(0,l.kt)("p",null,"Instead of:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},'bindkey "^ " magic-space\nbindkey " " globalias\n')),(0,l.kt)("p",null,"The actual call that'll be done will be:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},'bindkey "^ " globalias\nbindkey " " magic-space\n')),(0,l.kt)("p",null,"For the ",(0,l.kt)("inlineCode",{parentName:"p"},'bindmap=\'!" " -> magic-space; !"^ " -> globalias\'')," ice."),(0,l.kt)("h3",{id:"using-bindmap-in-light-mode"},"Using ",(0,l.kt)("inlineCode",{parentName:"h3"},"bindmap'\u2026'")," in light mode"),(0,l.kt)("p",null,"When the investigation mode is on i.e.:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"when the full loading mode is being used, default in the ",(0,l.kt)("inlineCode",{parentName:"li"},"for")," syntax and when ",(0,l.kt)("inlineCode",{parentName:"li"},"zi load \u2026")," is used, then the\n",(0,l.kt)("inlineCode",{parentName:"li"},"bindmap'\u2026'")," ice works normally.")),(0,l.kt)("p",null,"In the non-investigation:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"the ",(0,l.kt)("a",{parentName:"li",href:"/search/?q=light+mode"},"light mode")," \u2013 activated when ",(0,l.kt)("inlineCode",{parentName:"li"},"zi light \u2026")," or the ",(0,l.kt)("inlineCode",{parentName:"li"},"light-mode")," ice is being used \u2013 the ",(0,l.kt)("inlineCode",{parentName:"li"},"bindmap'\u2026'")," is\nunavailable, unless the ",(0,l.kt)("inlineCode",{parentName:"li"},"trackbinds")," ice is specified:")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"# With use of the light-mode ice and the for-syntax:\nzi light-mode trackbinds bindmap'^R -> ^G' for z-shell/history-search-multi-word\n\n# With use of the classic syntax:\nzi trackbinds bindmap'^R -> ^G' for z-shell/history-search-multi-word\nzi light z-shell/history-search-multi-word\n")),(0,l.kt)("h3",{id:"using-the-upar-shorthands"},"Using the ",(0,l.kt)("kbd",null,"UPAR")," shorthands"),(0,l.kt)("p",null,"There are four special values that can be used on the left side of the bind-map: ",(0,l.kt)("kbd",null,"UPAR"),", ",(0,l.kt)("kbd",null,"DOWNAR"),","),(0,l.kt)("kbd",null,"LEFTAR"),", ",(0,l.kt)("kbd",null,"RIGHTAR"),". They'll match up arrow, down arrow, etc. So that it's possible to do:",(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"zi bindmap='LEFTAR -> ^F; RIGHTAR -> ^G' \u2026\n")),(0,l.kt)("p",null,"The benefits of using the ",(0,l.kt)("kbd",null,"UPAR"),", \u2026 shorthands is that they cover multiple possible cursor-key codes for each\nof the cursor key, so that they'll work regardless of the terminal being used."))}u.isMDXComponent=!0}}]);