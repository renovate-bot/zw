"use strict";(self.webpackChunkzw=self.webpackChunkzw||[]).push([[1025],{9613:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return m}});var a=n(9496);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},h={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,p=e.parentName,u=r(e,["components","mdxType","originalType","parentName"]),d=s(n),m=i,c=d["".concat(p,".").concat(m)]||d[m]||h[m]||o;return n?a.createElement(c,l(l({ref:t},u),{},{components:n})):a.createElement(c,l({ref:t},u))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,l=new Array(o);l[0]=d;var r={};for(var p in t)hasOwnProperty.call(t,p)&&(r[p]=t[p]);r.originalType=e,r.mdxType="string"==typeof e?e:i,l[1]=r;for(var s=2;s<o;s++)l[s]=n[s];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},389:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return p},default:function(){return m},frontMatter:function(){return r},metadata:function(){return s},toc:function(){return h}});var a=n(2182),i=n(9028),o=(n(9496),n(9613)),l=["components"],r={id:"zsh_plugin_standard",title:"Zsh Plugin Standard",sidebar_position:2},p=void 0,s={unversionedId:"zsh_plugin_standard",id:"zsh_plugin_standard",title:"Zsh Plugin Standard",description:"What Is A Zsh Plugin?",source:"@site/community/02_zsh_plugin_standard.md",sourceDirName:".",slug:"/zsh_plugin_standard",permalink:"/zh-Hans/community/zsh_plugin_standard",editUrl:"https://digitalclouds.crowdin.com/z-shell/zh-Hans",tags:[],version:"current",sidebarPosition:2,frontMatter:{id:"zsh_plugin_standard",title:"Zsh Plugin Standard",sidebar_position:2},sidebar:"autoSideBar_2",previous:{title:"Zsh Knowledge Base",permalink:"/zh-Hans/community/intro"},next:{title:"Zsh Native Scripting Handbook",permalink:"/zh-Hans/community/zsh_handbook"}},u={},h=[{value:"What Is A Zsh Plugin?",id:"what-is-a-zsh-plugin",level:2},{value:"1. Standardized <code>$0</code> Handling",id:"zero-handling",level:2},{value:"<strong>STATUS:</strong>  zero-handling ",id:"status--zero-handling-",level:3},{value:"2. Functions Directory",id:"funtions-directory",level:2},{value:"<strong>STATUS:</strong>  functions-directory ",id:"status--functions-directory-",level:3},{value:"3. Binaries Directory",id:"binaries-directory",level:2},{value:"<strong>STATUS:</strong>  binaries-directory ",id:"status--binaries-directory-",level:3},{value:"4. Unload Function",id:"unload-function",level:2},{value:"<strong>STATUS:</strong>  unload-function ",id:"unload-function",level:3},{value:"5. <code>@zsh-plugin-run-on-unload</code> Call",id:"run-on-unload-call",level:2},{value:"<strong>STATUS:</strong>  run-on-unload-call ",id:"status--run-on-unload-call-",level:3},{value:"6. <code>@zsh-plugin-run-on-update</code> Call",id:"run-on-update-call",level:2},{value:"<strong>STATUS:</strong>  run-on-update-call ",id:"status--run-on-update-call-",level:3},{value:"7. Plugin Manager Activity Indicator",id:"activity-indicator",level:2},{value:"<strong>STATUS:</strong>  activity-indicator ",id:"status--activity-indicator-",level:3},{value:"8. Global Parameter With PREFIX For Make, Configure, Etc",id:"global-parameter-with-prefix",level:2},{value:"<strong>STATUS:</strong>  global-parameter-with-prefix ",id:"status--global-parameter-with-prefix-",level:3},{value:"9. Global Parameter holding the plugin manager\u2019s capabilities",id:"global-parameter-with-capabilities",level:2},{value:"<strong>STATUS:</strong>  global-parameter-with-capabilities ",id:"status--global-parameter-with-capabilities-",level:3},{value:"Zsh Plugin-Programming Best practices",id:"zsh-plugin-programming-best-practices",level:2},{value:"Use Of <code>add-zsh-hook</code> To Install Hooks",id:"use-of-add-zsh-hook-to-install-hooks",level:2},{value:"Use Of <code>add-zle-hook-widget</code> To Install Zle Hooks",id:"use-of-add-zle-hook-widget-to-install-zle-hooks",level:2},{value:"Standard Parameter Naming",id:"standard-parameter-naming",level:2},{value:"Standard <code>Plugins</code> Hash",id:"standard-plugins-hash",level:2},{value:"Standard Recommended Options",id:"standard-recommended-options",level:2},{value:"Standard Recommended Variables",id:"standard-recommended-variables",level:2},{value:"Standard Function Name-Space Prefixes",id:"standard-function-name-space-prefixes",level:2},{value:"The Problems Solved By The Proposition",id:"the-problems-solved-by-the-proposition",level:2},{value:"The Proposed Function-Name Prefixes",id:"the-proposed-function-name-prefixes",level:2},{value:"Example Code Utilizing The Prefixes",id:"example-code-utilizing-the-prefixes",level:2},{value:"Preventing Function Pollution",id:"preventing-function-pollution",level:2},{value:"Preventing Parameter Pollution",id:"preventing-parameter-pollution",level:2}],d={toc:h};function m(e){var t=e.components,n=(0,i.Z)(e,l);return(0,o.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"what-is-a-zsh-plugin"},"What Is A Zsh Plugin?"),(0,o.kt)("p",null,"Historically, Zsh plugins were first defined by Oh My Zsh. They provide for a way to package together files that extend\nor configure the shell\u2019s functionality in a particular way."),(0,o.kt)("p",null,"At a simple level, a plugin:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Has its directory added to ",(0,o.kt)("inlineCode",{parentName:"p"},"$fpath"),"\n(",(0,o.kt)("a",{parentName:"p",href:"http://zsh.sourceforge.net/Doc/Release/Functions.html#Autoloading-Functions"},"Zsh documentation"),"). This is being\ndone either by a plugin manager or by the plugin itself (see ",(0,o.kt)("a",{parentName:"p",href:"#run-on-unload-call"},"5th section")," for more\ninformation).")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Has it\u2019s first ",(0,o.kt)("inlineCode",{parentName:"p"},"*.plugin.zsh")," file sourced (or ",(0,o.kt)("inlineCode",{parentName:"p"},"*.zsh"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"init.zsh"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"*.sh"),", these are non-standard)."),(0,o.kt)("p",{parentName:"li"},"2.1 The first point allows plugins to provide completions and functions that are loaded via Zsh\u2019s ",(0,o.kt)("inlineCode",{parentName:"p"},"autoload"),"\nmechanism (a single function per file).")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"From a more broad perspective, a plugin consists of:"),(0,o.kt)("p",{parentName:"li"},"3.1. A directory containing various files (the main script, autoload functions, completions, Makefiles, backend\nprograms, documentation)."),(0,o.kt)("p",{parentName:"li"},"3.2. A sourceable script that obtains the path to its directory via ",(0,o.kt)("inlineCode",{parentName:"p"},"$0")," (see the ",(0,o.kt)("a",{parentName:"p",href:"#zero-handling"},"next section")," for\na related enhancement proposal)."),(0,o.kt)("p",{parentName:"li"},"3.3. A Github (or another site) repository identified by two components ",(0,o.kt)("strong",{parentName:"p"},"username"),"/",(0,o.kt)("strong",{parentName:"p"},"pluginname"),"."),(0,o.kt)("p",{parentName:"li"},"3.4. A software package containing any type of command line artifacts \u2013 when used with advanced plugin managers that\nhave hooks, can run Makefiles, add directories to ",(0,o.kt)("inlineCode",{parentName:"p"},"$PATH"),"."))),(0,o.kt)("p",null,'Below follow proposed enhancements and codifications of the definition of a "Zsh the plugin" and the actions of plugin\nmanagers \u2013 the proposed standardization.'),(0,o.kt)("p",null,"They cover the information on how to write a Zsh plugin."),(0,o.kt)("h2",{id:"zero-handling"},"1. Standardized ",(0,o.kt)("inlineCode",{parentName:"h2"},"$0")," Handling"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"[ zero-handling ]")),(0,o.kt)("p",null,"To get the plugin\u2019s location, plugins should do:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},'0="${ZERO:-${${0:#$ZSH_ARGZERO}:-${(%):-%N}}}"\n0="${${(M)0:#/*}:-$PWD/$0}"\n')),(0,o.kt)("p",null,"Then ",(0,o.kt)("inlineCode",{parentName:"p"},"${0:h}")," to get plugin\u2019s directory."),(0,o.kt)("p",null,"The one-line code above will:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Be backward-compatible with normal ",(0,o.kt)("inlineCode",{parentName:"p"},"$0")," setting and usage.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Use ",(0,o.kt)("inlineCode",{parentName:"p"},"ZERO")," if it\u2019s not empty,"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"the plugin manager will be easily able to alter effective ",(0,o.kt)("inlineCode",{parentName:"p"},"$0")," before loading a plugin,")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"this allows e.g. ",(0,o.kt)("inlineCode",{parentName:"p"},'eval "$(<plugin)"'),", which can be faster than ",(0,o.kt)("inlineCode",{parentName:"p"},"source"),"\n(",(0,o.kt)("a",{parentName:"p",href:"http://www.zsh.org/mla/workers/2017/msg01827.html"},"comparison")," note that it\u2019s not for a compiled script).")))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Use ",(0,o.kt)("inlineCode",{parentName:"p"},"$0")," if it doesn\u2019t contain the path to the Zsh binary,"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"plugin manager will still be able to set ",(0,o.kt)("inlineCode",{parentName:"p"},"$0"),", although more difficultly, requires ",(0,o.kt)("inlineCode",{parentName:"p"},"unsetopt function_argzero"),"\nbefore sourcing plugin script, and ",(0,o.kt)("inlineCode",{parentName:"p"},"0=\u2026\u200b")," assignment after sourcing plugin script.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"unsetopt function_argzero")," will be detected (it causes ",(0,o.kt)("inlineCode",{parentName:"p"},"$0")," not to contain a plugin-script path, but the path to\nZsh binary, if not overwritten by a ",(0,o.kt)("inlineCode",{parentName:"p"},"0=\u2026\u200b")," assignment),")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"setopt posix_argzero")," will be detected (as above).")))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Use ",(0,o.kt)("inlineCode",{parentName:"p"},"%N")," prompt expansion flag, which always gives absolute path to script,"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"plugin manager cannot alter this (no advanced loading of plugin is possible), but simple plugin-file sourcing\n(without a plugin manager) will be saved from breaking caused by the mentioned ",(0,o.kt)("inlineCode",{parentName:"li"},"*_argzero")," options, so this is a\nvery good last-resort fallback."))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Finally, in the second line, it will ensure that ",(0,o.kt)("inlineCode",{parentName:"p"},"$0")," contains an absolute path by prepending it with ",(0,o.kt)("inlineCode",{parentName:"p"},"$PWD")," if\nnecessary."))),(0,o.kt)("p",null,"The goal is flexibility, with essential motivation to support ",(0,o.kt)("inlineCode",{parentName:"p"},'eval "$(<plugin)"')," and definitely solve\n",(0,o.kt)("inlineCode",{parentName:"p"},"setopt no_function_argzero")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"setopt posix_argzero")," cases."),(0,o.kt)("p",null,"A plugin manager will be even able to convert a plugin to a function (author implemented such proof of concept\nfunctionality, it\u2019s fully possible \u2013 also in an automatic fashion), but performance differences of this are yet unclear."),(0,o.kt)("p",null,"It might however provide a use case."),(0,o.kt)("p",null,"The last, 5th point also allows using the ",(0,o.kt)("inlineCode",{parentName:"p"},"$0")," handling in scripts (i.e. runnable with the hashbang ",(0,o.kt)("inlineCode",{parentName:"p"},"#!\u2026"),") to get the\ndirectory in which the script file resides."),(0,o.kt)("p",null,"The assignment uses quoting to make it resilient to the combination of ",(0,o.kt)("inlineCode",{parentName:"p"},"GLOB_SUBST")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"GLOB_ASSIGN")," options. It\u2019s a\nstandard snippet of code, so it has to be always working."),(0,o.kt)("p",null,"When you\u2019ll set e.g.: the ",(0,o.kt)("inlineCode",{parentName:"p"},"zsh")," emulation in a function, you in general don\u2019t have to quote assignments."),(0,o.kt)("h3",{id:"status--zero-handling-"},(0,o.kt)("strong",{parentName:"h3"},"STATUS:")," ","[ zero-handling ]"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Plugin managers: ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/z-shell/zi"},"ZI"),", ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/zdharma-continuum/zinit"},"Zinit"),",\n",(0,o.kt)("a",{parentName:"p",href:"https://github.com/zpm-zsh/zpm"},"Zpm"),", ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/jandamm/zgenom"},"Zgenom"),", Zgen (after and if the\n",(0,o.kt)("a",{parentName:"p",href:"https://github.com/tarjoilija/zgen/pull/124"},"PR")," will be merged).")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Plugins: ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/search?q=%22$%7BZERO:-$%7B0:%23$ZSH_ARGZERO%7D%7D%22&type=Code"},"GitHub search")))),(0,o.kt)("h2",{id:"funtions-directory"},"2. Functions Directory"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"[ functions-directory ]")),(0,o.kt)("p",null,"Despite that, the current-standard plugins have their main directory added to ",(0,o.kt)("inlineCode",{parentName:"p"},"$fpath"),", a more clean approach is being\nproposed:"),(0,o.kt)("p",null,"that the plugins use a subdirectory called ",(0,o.kt)("inlineCode",{parentName:"p"},"functions")," to store their completions and autoload functions. This will\nallow a much cleaner design of plugins."),(0,o.kt)("p",null,"The plugin manager should add such a directory to ",(0,o.kt)("inlineCode",{parentName:"p"},"$fpath"),"."),(0,o.kt)("p",null,"The lack of support of the current plugin managers can be easily resolved via the ",(0,o.kt)("a",{parentName:"p",href:"#indicator"},"indicator"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},'if [[ ${zsh_loaded_plugins[-1]} != */kalc && -z ${fpath[(r)${0:h}/functions]} ]] {\n    fpath+=( "${0:h}/functions" )\n}\n')),(0,o.kt)("p",null,"or, via use of the ",(0,o.kt)("inlineCode",{parentName:"p"},"PMSPEC")," ",(0,o.kt)("a",{parentName:"p",href:"#pmspec"},"parameter"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},'if [[ $PMSPEC != *f* ]] {\n    fpath+=( "${0:h}/functions" )\n}\n')),(0,o.kt)("p",null,"The above snippet added to the ",(0,o.kt)("inlineCode",{parentName:"p"},"plugin.zsh")," file will add the directory to the ",(0,o.kt)("inlineCode",{parentName:"p"},"$fpath")," with the compatibility with any\nnew plugin managers preserved."),(0,o.kt)("p",null,"The existence of the ",(0,o.kt)("inlineCode",{parentName:"p"},"functions")," subdirectory cancels the normal adding of the main plugin directory to ",(0,o.kt)("inlineCode",{parentName:"p"},"$fpath"),"."),(0,o.kt)("h3",{id:"status--functions-directory-"},(0,o.kt)("strong",{parentName:"h3"},"STATUS:")," ","[ functions-directory ]"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Plugin managers: ",(0,o.kt)("a",{parentName:"li",href:"https://github.com/zpm-zsh/zpm"},"Zpm"),", ",(0,o.kt)("a",{parentName:"li",href:"https://github.com/z-shell/zi"},"ZI"),",\n",(0,o.kt)("a",{parentName:"li",href:"https://github.com/zdharma-continuum/zinit"},"Zinit"),", ",(0,o.kt)("a",{parentName:"li",href:"https://github.com/jandamm/zgenom"},"Zgenom"),".")),(0,o.kt)("h2",{id:"binaries-directory"},"3. Binaries Directory"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"[ binaries-directory ]")),(0,o.kt)("p",null,"Plugins sometimes provide a runnable script or program, either for their internal use or for the end-user."),(0,o.kt)("p",null,"It is proposed that for the latter, the plugin shall use a ",(0,o.kt)("inlineCode",{parentName:"p"},"bin/")," subdirectory inside its main dir (it is recommended,\nthat for internal use, the runnable be called via the ",(0,o.kt)("inlineCode",{parentName:"p"},"$0")," value obtained as described above)."),(0,o.kt)("p",null,"The runnable should be put into the directory with a ",(0,o.kt)("inlineCode",{parentName:"p"},"+x")," access right assigned."),(0,o.kt)("p",null,"The task of the plugin manager should be:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Before sourcing the plugin\u2019s script it should test, if the ",(0,o.kt)("inlineCode",{parentName:"p"},"bin/")," directory exists within the plugin directory.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"If it does, it should add the directory to ",(0,o.kt)("inlineCode",{parentName:"p"},"$PATH"),".")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"The plugin manager can also, instead of extending the ",(0,o.kt)("inlineCode",{parentName:"p"},"$PATH"),", create a ",(0,o.kt)("strong",{parentName:"p"},"shim")," (i.e.: a forwarder script) or a\nsymbolic link inside a common directory that\u2019s already added to ",(0,o.kt)("inlineCode",{parentName:"p"},"$PATH")," (to limit extending it).")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"The plugin manager is permitted to do optional things like ensuring ",(0,o.kt)("inlineCode",{parentName:"p"},"+x")," access rights on the directory contents."))),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"$PMSPEC")," code letter for the feature is ",(0,o.kt)("inlineCode",{parentName:"p"},"b"),", and it allows for the plugin to handle the ",(0,o.kt)("inlineCode",{parentName:"p"},"$PATH")," extending itself,\nvia, e.g.:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},'if [[ $PMSPEC != *b* ]] {\n    path+=( "${0:h}/bin" )\n}\n')),(0,o.kt)("h3",{id:"status--binaries-directory-"},(0,o.kt)("strong",{parentName:"h3"},"STATUS:")," ","[ binaries-directory ]"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Plugin managers: ",(0,o.kt)("a",{parentName:"li",href:"https://github.com/zpm-zsh/zpm"},"Zpm"),", ",(0,o.kt)("a",{parentName:"li",href:"https://github.com/jandamm/zgenom"},"Zgenom")," (when you set\n",(0,o.kt)("inlineCode",{parentName:"li"},"ZGENOM_AUTO_ADD_BIN=1"),").")),(0,o.kt)("h2",{id:"unload-function"},"4. Unload Function"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"[ unload-function ]")),(0,o.kt)("p",null,"If a plugin is named e.g. ",(0,o.kt)("inlineCode",{parentName:"p"},"kalc")," (and is available via ",(0,o.kt)("inlineCode",{parentName:"p"},"an-user/kalc")," plugin-ID), then it can provide a function,\n",(0,o.kt)("inlineCode",{parentName:"p"},"kalc_plugin_unload"),", that can be called by a plugin manager to undo the effects of loading that plugin."),(0,o.kt)("p",null,"A plugin manager can implement its tracking of changes made by a plugin so this is in general optional. However, to\nproperly unload e.g. a prompt, dedicated tracking (easy to do for the plugin creator) can provide better, predictable\nresults."),(0,o.kt)("p",null,"Any special, uncommon effects of loading a plugin are possible to undo only by a dedicated function."),(0,o.kt)("p",null,"However, an interesting compromise approach is available \u2013 to withdraw only the special effects of loading a plugin via\nthe dedicated, plugin-provided function and leave the rest to the plugin manager. The value of such an approach is that\nmaintaining of such function (if it is to withdraw ",(0,o.kt)("strong",{parentName:"p"},"all")," plugin side-effects) can be a daunting task requiring\nconstant monitoring of it during the plugin development process."),(0,o.kt)("p",null,"Note that the unload function should contain ",(0,o.kt)("inlineCode",{parentName:"p"},"unfunction $0")," (or better ",(0,o.kt)("inlineCode",{parentName:"p"},"unfunction kalc_plugin_unload")," etc., for\ncompatibility with the ",(0,o.kt)("inlineCode",{parentName:"p"},"*_argzero")," options), to also delete the function itself."),(0,o.kt)("h3",{id:"unload-function"},(0,o.kt)("strong",{parentName:"h3"},"STATUS:")," ","[ unload-function ]"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("a",{parentName:"p",href:"https://github.com/z-shell/zi"},"ZI"),", implements plugin unloading and calls the function.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"romkatv/powerlevel10k"),", is ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/romkatv/powerlevel10k/blob/f17081ca/internal/p10k.zsh#L5390"},"using"),"\nthe function to execute a specific task: shutdown of the binary, background\n",(0,o.kt)("a",{parentName:"p",href:"https://github.com/romkatv/gitstatus"},"gitstatus")," demon, with a very good results,")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"agkozak/agkozak-zsh-prompt")," is\n",(0,o.kt)("a",{parentName:"p",href:"https://github.com/agkozak/agkozak-zsh-prompt/blob/ed228952d68fea6d5cad3beee869167f76c59606/agkozak-zsh-prompt.plugin.zsh#L992-L1039"},"using"),"\nthe function to completely unload the prompt,")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"agkozak/zsh-z")," is\n",(0,o.kt)("a",{parentName:"p",href:"https://github.com/agkozak/zsh-z/blob/16fba5e9d5c4b650358d65e07609dda4947f97e8/zsh-z.plugin.zsh#L680-L698"},"using")," the\nfunction to completly unload the plugin,")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"agkozak/zhooks")," is\n",(0,o.kt)("a",{parentName:"p",href:"https://github.com/agkozak/zhooks/blob/628e1e3b8373bf31c26cb154f71c16ebe9d13b51/zhooks.plugin.zsh#L75-L82"},"using")," the\nfunction to completely unload the plugin."))),(0,o.kt)("h2",{id:"run-on-unload-call"},"5. ",(0,o.kt)("inlineCode",{parentName:"h2"},"@zsh-plugin-run-on-unload")," Call"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"[ run-on-unload-call ]")),(0,o.kt)("p",null,"The plugin manager can provide a function ",(0,o.kt)("inlineCode",{parentName:"p"},"@zsh-plugin-run-on-unload")," which has the following call syntax:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-zsh"},'@zsh-plugin-run-on-unload "{code-snippet-1}" "{code-snippet-2}" \u2026\n')),(0,o.kt)("p",null,"The function registers pieces of code to be run by the plugin manager ",(0,o.kt)("strong",{parentName:"p"},"on unload of the plugin"),"."),(0,o.kt)("p",null,"The execution of the code should be done by the ",(0,o.kt)("inlineCode",{parentName:"p"},"eval")," built-in in the same order as they are passed to the call."),(0,o.kt)("p",null,"The code should be executed in the plugin\u2019s directory, in the current shell."),(0,o.kt)("p",null,"The mechanism thus provides another way, side to the ",(0,o.kt)("a",{parentName:"p",href:"#unload-function"},"unload function"),", for the plugin to participate\nin the process of unloading it."),(0,o.kt)("h3",{id:"status--run-on-unload-call-"},(0,o.kt)("strong",{parentName:"h3"},"STATUS:")," ","[ run-on-unload-call ]"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Plugin managers: ",(0,o.kt)("a",{parentName:"li",href:"https://github.com/z-shell/zi"},"ZI"),", ",(0,o.kt)("a",{parentName:"li",href:"https://github.com/zdharma-continuum/zinit"},"Zinit"),".")),(0,o.kt)("h2",{id:"run-on-update-call"},"6. ",(0,o.kt)("inlineCode",{parentName:"h2"},"@zsh-plugin-run-on-update")," Call"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"[ run-on-update-call ]")),(0,o.kt)("p",null,"The plugin manager can provide a function ",(0,o.kt)("inlineCode",{parentName:"p"},"@zsh-plugin-run-on-update")," which has the following call syntax:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-zsh"},'@zsh-plugin-run-on-update "{code-snippet-1}" "{code-snippet-2}" \u2026\n')),(0,o.kt)("p",null,"The function registers pieces of code to be run by the plugin manager on an update of the plugin."),(0,o.kt)("p",null,"The execution of the code should be done by the ",(0,o.kt)("inlineCode",{parentName:"p"},"eval")," built-in in the same order as they are passed to the call."),(0,o.kt)("p",null,"The code should be executed in the plugin\u2019s directory, possibly in a subshell ",(0,o.kt)("strong",{parentName:"p"},"After downloading any new commits")," to\nthe repository."),(0,o.kt)("h3",{id:"status--run-on-update-call-"},(0,o.kt)("strong",{parentName:"h3"},"STATUS:")," ","[ run-on-update-call ]"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Plugin managers: ",(0,o.kt)("a",{parentName:"li",href:"https://github.com/z-shell/zi"},"ZI"),", ",(0,o.kt)("a",{parentName:"li",href:"https://github.com/zdharma-continuum/zinit"},"Zinit"),".")),(0,o.kt)("h2",{id:"activity-indicator"},"7. Plugin Manager Activity Indicator"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"[ activity-indicator ]")),(0,o.kt)("p",null,"Plugin managers should set the ",(0,o.kt)("inlineCode",{parentName:"p"},"$zsh_loaded_plugins")," array to contain all previously loaded plugins and the plugin\ncurrently being loaded (as the last element)."),(0,o.kt)("p",null,"This will allow any plugin to:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Check which plugins are already loaded.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Check if it is being loaded by a plugin manager (i.e. not just sourced)."))),(0,o.kt)("p",null,"The first item allows a plugin to e.g. issue a notice about missing dependencies."),(0,o.kt)("p",null,"Instead of issuing a notice, it may be able to satisfy the dependencies from resources it provides."),(0,o.kt)("p",null,"For example, the ",(0,o.kt)("inlineCode",{parentName:"p"},"pure")," prompt provides a ",(0,o.kt)("inlineCode",{parentName:"p"},"zsh-async")," dependency library within its source tree, which is normally a\nseparate project. Consequently, the prompt can decide to source its private copy of ",(0,o.kt)("inlineCode",{parentName:"p"},"zsh-async"),", having also reliable\n",(0,o.kt)("inlineCode",{parentName:"p"},"$0")," defined by the previous section (note: ",(0,o.kt)("inlineCode",{parentName:"p"},"pure")," doesn\u2019t normally do this)."),(0,o.kt)("p",null,"The second item allows a plugin to e.g. set up ",(0,o.kt)("inlineCode",{parentName:"p"},"$fpath"),", knowing that plugin manager will not handle this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},'if [[ ${zsh_loaded_plugins[-1]} != */kalc && -z ${fpath[(r)${0:h}]} ]] {\n    fpath+=( "${0:h}" )\n}\n')),(0,o.kt)("p",null,"This will allow the user to reliably source the plugin without using a plugin manager."),(0,o.kt)("p",null,"The code uses the wrapping braces around variables (i.e.: e.g.: ",(0,o.kt)("inlineCode",{parentName:"p"},"${fpath\u2026}"),") to make it compatible with the ",(0,o.kt)("inlineCode",{parentName:"p"},"KSH_ARRAYS"),"\noption and the quoting around ",(0,o.kt)("inlineCode",{parentName:"p"},"${0:h}")," to make it compatible with the ",(0,o.kt)("inlineCode",{parentName:"p"},"SH_WORD_SPLIT")," option."),(0,o.kt)("h3",{id:"status--activity-indicator-"},(0,o.kt)("strong",{parentName:"h3"},"STATUS:")," ","[ activity-indicator ]"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Plugin managers: ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/z-shell/zi"},"ZI"),", ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/zdharma-continuum/zinit"},"Zinit"),",\n",(0,o.kt)("a",{parentName:"p",href:"https://github.com/zpm-zsh/zpm"},"Zpm"),", ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/jandamm/zgenom"},"Zgenom"),", Zgen (after and if the\n",(0,o.kt)("a",{parentName:"p",href:"https://github.com/tarjoilija/zgen/pull/124"},"PR")," will be merged).")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Plugins: ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/search?q=if+%22zsh_loaded_plugins%22&type=Code"},"GitHub search")))),(0,o.kt)("h2",{id:"global-parameter-with-prefix"},"8. Global Parameter With PREFIX For Make, Configure, Etc"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"[ global-parameter-with-prefix ]")),(0,o.kt)("p",null,"Plugin managers may export the parameter ",(0,o.kt)("inlineCode",{parentName:"p"},"$ZPFX")," which should contain a path to a directory dedicated for user-land\nsoftware, i.e. for directories ",(0,o.kt)("inlineCode",{parentName:"p"},"$ZPFX/bin"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"$ZPFX/lib"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"$ZPFX/share"),", etc."),(0,o.kt)("p",null,"The suggested name of the directory is ",(0,o.kt)("inlineCode",{parentName:"p"},"polaris")," (e.g.: ZI uses this name and places this directory at ",(0,o.kt)("inlineCode",{parentName:"p"},"~/.zi/polaris"),"\nby default)."),(0,o.kt)("p",null,"Users can then configure hooks (a feature of e.g. zplug and ZI) to invoke e.g. ",(0,o.kt)("inlineCode",{parentName:"p"},"make PREFIX=$ZPFX install")," at clone &\nupdate of the plugin to install software like e.g. ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/tj/git-extras"},"tj/git-extras"),". This is a the\ndeveloping role of Zsh plugin managers as package managers, where ",(0,o.kt)("inlineCode",{parentName:"p"},".zshrc")," has a similar role to Chef or Puppet\nconfiguration and allows to ",(0,o.kt)("strong",{parentName:"p"},"declare")," system state, and have the same state on different accounts/machines."),(0,o.kt)("p",null,"No-narration facts-list related to ",(0,o.kt)("inlineCode",{parentName:"p"},"$ZPFX"),":"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},'export ZPFX="$HOME/polaris"')," (or e.g. ",(0,o.kt)("inlineCode",{parentName:"p"},"$HOME/.zi/polaris"),")")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"make PREFIX=$ZPFX install"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"./configure --prefix=$ZPFX"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"cmake -DCMAKE_INSTALL_PREFIX=$ZPFX ."))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},'zi ice make"PREFIX=$ZPFX install"'))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},'zi \u2026 hook-build:"make PREFIX=$PFX install"')))),(0,o.kt)("h3",{id:"status--global-parameter-with-prefix-"},(0,o.kt)("strong",{parentName:"h3"},"STATUS:")," ","[ global-parameter-with-prefix ]"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Plugin managers: ",(0,o.kt)("a",{parentName:"li",href:"https://github.com/z-shell/zi"},"ZI"),", ",(0,o.kt)("a",{parentName:"li",href:"https://github.com/zdharma-continuum/zinit"},"Zinit"),",\n",(0,o.kt)("a",{parentName:"li",href:"https://github.com/zpm-zsh/zpm"},"Zpm"),", ",(0,o.kt)("a",{parentName:"li",href:"https://github.com/jandamm/zgenom"},"Zgenom"),".")),(0,o.kt)("h2",{id:"global-parameter-with-capabilities"},"9. Global Parameter holding the plugin manager\u2019s capabilities"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"[ global-parameter-with-capabilities ]")),(0,o.kt)("p",null,"The above paragraphs of the standard spec each constitute a capability, a feature of the plugin manager."),(0,o.kt)("p",null,"It would make sense that the capabilities are somehow discoverable. To address this, a global parameter called ",(0,o.kt)("inlineCode",{parentName:"p"},"PMSPEC"),"\n(from ",(0,o.kt)("em",{parentName:"p"},"plugin-manager specification"),") is proposed."),(0,o.kt)("p",null,"It can hold the following Latin letters each informing the plugin, that the plugin manager has support for a given\nfeature:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"0")," \u2013 the plugin manager provides the ",(0,o.kt)("inlineCode",{parentName:"p"},"ZERO")," parameter,")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"f")," - \u2026 supports the ",(0,o.kt)("inlineCode",{parentName:"p"},"functions/")," subdirectory,")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"b")," - \u2026 supports the ",(0,o.kt)("inlineCode",{parentName:"p"},"bin/")," subdirectory,")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"u")," - \u2026 the unload function,")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"U")," - \u2026 the ",(0,o.kt)("inlineCode",{parentName:"p"},"@zsh-plugin-run-on-unload")," call,")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"p")," \u2013 \u2026 the ",(0,o.kt)("inlineCode",{parentName:"p"},"@zsh-plugin-run-on-update")," call,")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"i")," \u2013 \u2026 the ",(0,o.kt)("inlineCode",{parentName:"p"},"zsh_loaded_plugins")," activity indicator,")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"P")," \u2013 \u2026 the ",(0,o.kt)("inlineCode",{parentName:"p"},"ZPFX")," global parameter,")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"s")," \u2013 \u2026 the ",(0,o.kt)("inlineCode",{parentName:"p"},"PMSPEC")," global parameter itself (i.e.: should be always present)."))),(0,o.kt)("p",null,"The contents of the parameter describing a fully-compliant plugin manager should be: ",(0,o.kt)("inlineCode",{parentName:"p"},"0fuUpiPs"),"."),(0,o.kt)("p",null,"The plugin can then verify the support by, e.g.:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},'if [[ $PMSPEC != *f* ]] {\n    fpath+=( "${0:h}/functions" )\n}\n')),(0,o.kt)("h3",{id:"status--global-parameter-with-capabilities-"},(0,o.kt)("strong",{parentName:"h3"},"STATUS:")," ","[ global-parameter-with-capabilities ]"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Plugin managers: ",(0,o.kt)("a",{parentName:"li",href:"https://github.com/z-shell/zi"},"ZI"),", ",(0,o.kt)("a",{parentName:"li",href:"https://github.com/zdharma-continuum/zinit"},"Zinit"),",\n",(0,o.kt)("a",{parentName:"li",href:"https://github.com/zpm-zsh/zpm"},"Zpm"),", ",(0,o.kt)("a",{parentName:"li",href:"https://github.com/jandamm/zgenom"},"Zgenom"),".")),(0,o.kt)("h2",{id:"zsh-plugin-programming-best-practices"},"Zsh Plugin-Programming Best practices"),(0,o.kt)("p",null,"The document is to define a ",(0,o.kt)("strong",{parentName:"p"},"Zsh-plugin")," but also to serve as an information source for plugin creators."),(0,o.kt)("p",null,"Therefore, it covers also best practices information in this section."),(0,o.kt)("h2",{id:"use-of-add-zsh-hook-to-install-hooks"},"Use Of ",(0,o.kt)("inlineCode",{parentName:"h2"},"add-zsh-hook")," To Install Hooks"),(0,o.kt)("p",null,"Zsh ships with a function ",(0,o.kt)("inlineCode",{parentName:"p"},"add-zsh-hook"),". It has the following invocation syntax:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-zsh"},"add-zsh-hook [ -L | -dD ] [ -Uzk ] hook function\n")),(0,o.kt)("p",null,"The command installs a ",(0,o.kt)("inlineCode",{parentName:"p"},"function")," as one of the supported zsh ",(0,o.kt)("inlineCode",{parentName:"p"},"hook")," entries. which are one of: ",(0,o.kt)("inlineCode",{parentName:"p"},"chpwd"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"periodic"),",\n",(0,o.kt)("inlineCode",{parentName:"p"},"precmd"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"preexec"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"zshaddhistory"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"zshexit"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"zsh_directory_name"),". For their meaning refer to the\n",(0,o.kt)("a",{parentName:"p",href:"http://zsh.sourceforge.net/Doc/Release/Functions.html#Hook-Functions"},"Zsh documentation"),"."),(0,o.kt)("h2",{id:"use-of-add-zle-hook-widget-to-install-zle-hooks"},"Use Of ",(0,o.kt)("inlineCode",{parentName:"h2"},"add-zle-hook-widget")," To Install Zle Hooks"),(0,o.kt)("p",null,"The zle editor is the part of the Zsh that is responsible for receiving the text from the user."),(0,o.kt)("p",null,"It can be said that it\u2019s based on widgets, which are nothing more than Zsh functions that are allowed to be run in Zle\ncontext, i.e. from the Zle editor (plus a few minor differences, like e.g.: the ",(0,o.kt)("inlineCode",{parentName:"p"},"$WIDGET")," parameter that\u2019s automatically\nset by the Zle editor)."),(0,o.kt)("p",null,"The syntax of the call is:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"add-zle-hook-widget [ -L | -dD ] [ -Uzk ] hook widgetname\n")),(0,o.kt)("p",null,"The call resembles the syntax of the ",(0,o.kt)("inlineCode",{parentName:"p"},"add-zsh-hook")," function. The only the difference is that it takes a ",(0,o.kt)("inlineCode",{parentName:"p"},"widgetname"),",\nnot a function name and that the ",(0,o.kt)("inlineCode",{parentName:"p"},"hook")," is being one of: ",(0,o.kt)("inlineCode",{parentName:"p"},"isearch-exit"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"isearch-update"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"line-pre-redraw"),",\n",(0,o.kt)("inlineCode",{parentName:"p"},"line-init"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"line-finish"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"history-line-set"),", or ",(0,o.kt)("inlineCode",{parentName:"p"},"keymap-select"),"."),(0,o.kt)("p",null,"Their meaning is explained in the\n",(0,o.kt)("a",{parentName:"p",href:"http://zsh.sourceforge.net/Doc/Release/Zsh-Line-Editor.html#Special-Widgets"},"Zsh documentation"),"."),(0,o.kt)("p",null,"The use of this function is recommended because it allows the installation ",(0,o.kt)("strong",{parentName:"p"},"multiple")," hooks per each ",(0,o.kt)("inlineCode",{parentName:"p"},"hook")," entry.\nBefore introducing the ",(0,o.kt)("inlineCode",{parentName:"p"},"add-zle-hook-widget"),' function the "normal" way to install a hook was to define a widget with the\nname of one of the special widgets.'),(0,o.kt)("p",null,"Now, after the function has been introduced in Zsh ",(0,o.kt)("inlineCode",{parentName:"p"},"5.3")," it should be used instead."),(0,o.kt)("h2",{id:"standard-parameter-naming"},"Standard Parameter Naming"),(0,o.kt)("p",null,"There\u2019s a convention already present in the Zsh world \u2013 to name array variables lowercase and scalars uppercase. It\u2019s\nbeing followed by e.g.: the Zsh manual and the Z shell itself (e.g.: ",(0,o.kt)("inlineCode",{parentName:"p"},"REPLY")," scalar and ",(0,o.kt)("inlineCode",{parentName:"p"},"reply")," array, etc.)."),(0,o.kt)("p",null,"The requirement for the scalars to be uppercase should be, in my opinion, kept only for the global parameters. I.e.:\nit\u2019s fine to name local parameters inside a function lowercase even when they are scalars, not only arrays."),(0,o.kt)("p",null,"An extension to the convention is being proposed: to name associative arrays (i.e.: hashes) capitalized, i.e.: with only\nfirst letter uppercase and the remaining letters lowercase."),(0,o.kt)("p",null,"See ",(0,o.kt)("a",{parentName:"p",href:"#standard-plugins-hash"},"the next section")," for an example of such hash. In the case of the name consisting of\nmultiple words each of them should be capitalized, e.g.: ",(0,o.kt)("inlineCode",{parentName:"p"},"typeset -A MyHash"),"."),(0,o.kt)("p",null,"This convention will increase code readability and bring order to it."),(0,o.kt)("h2",{id:"standard-plugins-hash"},"Standard ",(0,o.kt)("inlineCode",{parentName:"h2"},"Plugins")," Hash"),(0,o.kt)("p",null,"The plugin often has to declare global parameters that should live throughout a Zsh session. Following the\n",(0,o.kt)("a",{parentName:"p",href:"#preventing-function-pollution"},"namespace pollution prevention")," the plugin could use a hash to store the different\nvalues."),(0,o.kt)("p",null,"Additionally, the plugins could use a single hash parameter \u2013 called ",(0,o.kt)("inlineCode",{parentName:"p"},"Plugins")," \u2013 to prevent the pollution."),(0,o.kt)("p",null,"An example value needed by the plugin:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},'\u2026\ntypeset -gA Plugins\nPlugins[MY_PLUGIN_REPO_DIR]="${0:h}"\n')),(0,o.kt)("p",null,"This way all the data of all plugins will be kept in a single parameter, available for easy examination and overview\n(via e.g.: ",(0,o.kt)("inlineCode",{parentName:"p"},"varied Plugins"),") and also not polluting the namespace."),(0,o.kt)("h2",{id:"standard-recommended-options"},"Standard Recommended Options"),(0,o.kt)("p",null,"The following code snippet is recommended to be included at the beginning of each of the main functions provided by the\nplugin:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"emulate -L zsh\nsetopt extended_glob warn_create_global typeset_silent \\\n        no_short_loops rc_quotes no_auto_pushd\n")),(0,o.kt)("p",null,"It resets all the options to their default state according to the ",(0,o.kt)("inlineCode",{parentName:"p"},"zsh")," emulation mode, with the use of the\n",(0,o.kt)("inlineCode",{parentName:"p"},"local_options")," option \u2013 so the options will be restored to their previous state when leaving the function."),(0,o.kt)("p",null,"It then alters the emulation by ",(0,o.kt)("inlineCode",{parentName:"p"},"6")," different options:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"extended_glob")," \u2013 enables one of the main Zshell features \u2013 the advanced, the built-in regex-like globing mechanism,")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"warn_create_global")," \u2013 enables warnings to be printed each time a (global) the variable is defined without being\nexplicitly defined by a ",(0,o.kt)("inlineCode",{parentName:"p"},"typeset"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"local"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"declare"),", etc. call; it allows to catch typos and missing localizations\nof the variables and thus prevent from writing a bad code,")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"typeset_silent")," \u2013 it allows to call ",(0,o.kt)("inlineCode",{parentName:"p"},"typeset"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"local"),", etc. multiple times on the same variable; without it, the\nsecond call causes the variable contents to be printed first; using this option allows to declare variables inside\nloops, near the place of their use, which sometimes helps to write a more readable code,")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"no_short_loops")," \u2013 disables the short-loops syntax; this is done because when the syntax is enabled it limits the\nparser\u2019s ability to detect errors (see this ",(0,o.kt)("a",{parentName:"p",href:"https://www.zsh.org/mla/workers/2011/msg01050.html"},"zsh-workers post")," for\nthe details),")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"rc_quotes")," \u2013 adds useful ability to insert apostrophes into an apostrophe-quoted string, by use of ",(0,o.kt)("inlineCode",{parentName:"p"},"''")," inside it,\ne.g.: ",(0,o.kt)("inlineCode",{parentName:"p"},"'a string\u2019s example'")," will yield the string ",(0,o.kt)("inlineCode",{parentName:"p"},"a string\u2019s example"),",")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"no_auto_pushd")," - disables the automatic push of the directory passed to ",(0,o.kt)("inlineCode",{parentName:"p"},"cd")," builtin onto the directory stack; this\nis useful because otherwise the internal directory changes done by the plugin will pollute the global directory stack."))),(0,o.kt)("h2",{id:"standard-recommended-variables"},"Standard Recommended Variables"),(0,o.kt)("p",null,"It\u2019s good to localize the following variables at the entry of the main function of a plugin:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"local MATCH REPLY; integer MBEGIN MEND\nlocal -a match mbegin mend reply\n")),(0,o.kt)("p",null,"The variables starting with ",(0,o.kt)("inlineCode",{parentName:"p"},"m")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"M")," are being used by the substitutions utilizing ",(0,o.kt)("inlineCode",{parentName:"p"},"(#b)")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"(#m)")," flags,\nrespectively. They should not leak to the global scope. Also, their automatic creation would trigger the warning from\nthe ",(0,o.kt)("inlineCode",{parentName:"p"},"warn_create_global")," option."),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"reply")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"REPLY")," parameters are being normally used to return an array or a scalar from a function, respectively\n\u2013 it\u2019s the standard way of passing values from functions."),(0,o.kt)("p",null,"Their use is naturally limited to the functions called from the the main function of a plugin \u2013 they should not be used\nto pass data around e.g.: in between prompts, thus it\u2019s natural to localize them in the main function."),(0,o.kt)("h2",{id:"standard-function-name-space-prefixes"},"Standard Function Name-Space Prefixes"),(0,o.kt)("p",null,"The recommendation is the purely subjective opinion of the author."),(0,o.kt)("p",null,"It can evolve \u2013 if you have any remarks, don\u2019t hesitate to ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/z-shell/zw/issues/new"},"fill them"),"."),(0,o.kt)("h2",{id:"the-problems-solved-by-the-proposition"},"The Problems Solved By The Proposition"),(0,o.kt)("p",null,"However, when adopted, the proposition will solve the following issues:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Using the underscore ",(0,o.kt)("inlineCode",{parentName:"p"},"_")," to namespace functions \u2013 this isn\u2019t the right thing to do because the prefix is being\nalready used by the completion functions, so the namespace is already filled up greatly and the plugin functions get\nlost in it.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Not using a prefix at all \u2013 this is also an unwanted practice as it pollutes the command namespace\n(",(0,o.kt)("a",{parentName:"p",href:"https://github.com/z-shell/fast-syntax-highlighting/issues/157"},"an example")," of such issue appearing).")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"It would allow to quickly discriminate between function types \u2013 e.g.: seeing the ",(0,o.kt)("inlineCode",{parentName:"p"},":")," prefix informs the user that\nit\u2019s a hook-type function while seeing the ",(0,o.kt)("inlineCode",{parentName:"p"},"@")," prefix informs the user that it\u2019s an API-like function, etc.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"It also provides an improvement during programming, by allowing to quickly limit the number of completions offered by\nthe editor, e.g.: for Vim\u2019s ",(0,o.kt)("inlineCode",{parentName:"p"},"Ctrl-P")," completing, when entering ",(0,o.kt)("inlineCode",{parentName:"p"},"+<Ctrl-P>"),", then only a subset of the functions are\nbeing completed (see below for the type of the functions). ",(0,o.kt)("strong",{parentName:"p"},"Note:")," the editor has to be configured so that it\naccepts such special characters as part of keywords, for Vim it\u2019s: ",(0,o.kt)("inlineCode",{parentName:"p"},":set isk+=@-@,.,+,/,:")," for all of the proposed\nprefixes."))),(0,o.kt)("h2",{id:"the-proposed-function-name-prefixes"},"The Proposed Function-Name Prefixes"),(0,o.kt)("p",null,"The proposition of the standard prefixes is as follows:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"."),": for regular private functions. Example function: ",(0,o.kt)("inlineCode",{parentName:"p"},".prompt_zinc_get_value"),".")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"\u2192"),": for hook-like functions, so it should be used e.g.: for the ",(0,o.kt)("a",{parentName:"p",href:"#use-of-add-zsh-hook-to-install-hooks"},"Zsh hooks"),"\nand the ",(0,o.kt)("a",{parentName:"p",href:"#use-of-add-zle-hook-widget-to-install-zle-hooks"},"Zle hooks"),", but also for any other, custom hook-like\nmechanism in the plugin."))),(0,o.kt)("p",null,"Example function name: ",(0,o.kt)("inlineCode",{parentName:"p"},"\u2192prompt_zinc_precmd"),"."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"the previous version of the document recommended colon (",(0,o.kt)("inlineCode",{parentName:"p"},":"),") for the prefix, however, it was problematic, because\nWindows doesn\u2019t allow colons in file names, so it wasn\u2019t possible to name an autoload function this way,")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"the arrow has a rationale behind it - it denotes the execution ",(0,o.kt)("strong",{parentName:"p"},"coming back")," to the function at a later time, after\nit has been registered as a callback or a handler,")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"the arrow is easy to type on most keyboard layouts \u2013 it is ",(0,o.kt)("inlineCode",{parentName:"p"},"Right-Alt"),"+",(0,o.kt)("inlineCode",{parentName:"p"},"I"),"; in case of problems with typing the\ncharacter can be always copied \u2013 handler functions do occur in the code rarely,")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Zsh supports any string as a function name, because absolutely any string can be a ",(0,o.kt)("strong",{parentName:"p"},"file"),' name \u2013 if there would be\nan exception in the name of the callables, then how would it be possible to run a script called "\u2192abcd"? There are\n',(0,o.kt)("strong",{parentName:"p"},"no")," exceptions, the function can be called even as a the sequence of null bytes:"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"    \u276f $'\\0'() { print hello }\n    \u276f $'\\0'\n    hello\n")),(0,o.kt)("ol",{start:3},(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"+"),": for output functions, i.e.: for functions that print to the standard output and error or a log, etc. Example\nfunction name: ",(0,o.kt)("inlineCode",{parentName:"p"},"+prompt_zinc_output_segment"),".")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"/"),": for debugging functions, i.e: for functions that output debugs messages to the screen or a log or e.g.: gather\nsome debug data. ",(0,o.kt)("strong",{parentName:"p"},"Note:")," the slash makes it impossible for such functions to be auto-loaded via the ",(0,o.kt)("inlineCode",{parentName:"p"},"autoload"),"\nmechanism. It is somewhat risky to assume, that this will never be needed for the functions, however, the limited\nnumber of available ASCII characters justifies such allocation. Example function name: ",(0,o.kt)("inlineCode",{parentName:"p"},"/prompt_zinc_dmsg"),".")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"@"),": for API-like functions, i.e: for functions that are on a boundary to a subsystem and expose its functionality\nthrough a well-defined, in general fixed interface. For example this plugin standard ",(0,o.kt)("a",{parentName:"p",href:"#update-register-call"},"defines"),"\nthe function ",(0,o.kt)("inlineCode",{parentName:"p"},"@zsh-plugin-run-on-update"),", which is exposing a plugin manager\u2019s functionality in a well-defined way."))),(0,o.kt)("h2",{id:"example-code-utilizing-the-prefixes"},"Example Code Utilizing The Prefixes"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},'.zinc_register_hooks() {\n    add-zsh-hook precmd :zinc_precmd\n    /zinc_dmsg "Installed precmd hook with result: $?"\n    @zsh-plugin-run-on-unload "add-zsh-hook -d precmd :zinc_precmd"\n    +zinc_print "Zinc initialization complete"\n}\n')),(0,o.kt)("h2",{id:"preventing-function-pollution"},"Preventing Function Pollution"),(0,o.kt)("p",null,"When writing a larger autoload function, it very often is the case that the function contains definitions of other\nfunctions."),(0,o.kt)("p",null,"When the main function finishes executing, the functions are being left defined. This might be undesired, e.g.: because\nof the command namespace pollution."),(0,o.kt)("p",null,"The following snippet of code, when added at the beginning of the main function will automatically unset the\nsub-functions when leaving the main function to don't leak any functions into the global namespace:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},'typeset -g prjef\nprjef=( ${(k)functions} )\ntrap "unset -f -- \\"\\${(k)functions[@]:|prjef}\\" &>/dev/null; unset prjef" EXIT\ntrap "unset -f -- \\"\\${(k)functions[@]:|prjef}\\" &>/dev/null; unset prjef; return 1" INT\n')),(0,o.kt)("p",null,"Replace the ",(0,o.kt)("inlineCode",{parentName:"p"},"prj*")," prefix with your project name, e.g.: ",(0,o.kt)("inlineCode",{parentName:"p"},"rustef")," for a ",(0,o.kt)("inlineCode",{parentName:"p"},"rust"),"-related plugin. The ",(0,o.kt)("inlineCode",{parentName:"p"},"*ef"),' stands for\n"entry functions". The snippet works as follows:'),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"The line ",(0,o.kt)("inlineCode",{parentName:"p"},"prjef=( ${(k)functions} )")," remembers all the functions that are currently defined \u2013 which means that the\nlist excludes the functions that are to be yet defined by the body of the main function.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"The code ",(0,o.kt)("inlineCode",{parentName:"p"},'unset -f \u2014 "${(k)functions[@]:|prjef}"')," first does an subtraction of array contents \u2013 the ",(0,o.kt)("inlineCode",{parentName:"p"},":|")," substitution\noperator \u2013 of the functions that are defined at the moment of leaving of the function (the ",(0,o.kt)("inlineCode",{parentName:"p"},"trap"),"-s invoke the code\nin this moment) with the list of functions from the start of the main function \u2013 the ones stored in the variables\n",(0,o.kt)("inlineCode",{parentName:"p"},"$prjef"),".")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"It then unsets the resulting list of the functions \u2013 being only the newly defined functions in the main function \u2013 by\npassing it to ",(0,o.kt)("inlineCode",{parentName:"p"},"unset -f \u2026"),"."))),(0,o.kt)("p",null,"This way the functions defined by the body of the main (most often an autoload) the function will be only set during the\nexecution of the function."),(0,o.kt)("h2",{id:"preventing-parameter-pollution"},"Preventing Parameter Pollution"),(0,o.kt)("p",null,"When writing a plugin one often needs to keep a state during the Zsh session. To do this it is natural to use global\nparameters. However, when the number of the parameters grows one might want to limit it."),(0,o.kt)("p",null,"With the following method, only a single global parameter per plugin can be sufficient:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"typeset -A PlgMap\ntypeset -A SomeMap\ntypeset -a some_array\n\n# Use\n\nPlgMap[state]=1\nSomeMap[state]=1\nsome_array[1]=state\n")),(0,o.kt)("p",null,"can be converted into:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"typeset -A PlgMap\n\n# Use\n\nPlgMap[state]=1\nPlgMap[SomeMap__state]=1\nPlgMap[some_array__1]=state\n")),(0,o.kt)("p",null,"The use of this method is very unproblematic."),(0,o.kt)("p",null,"The author reduced the number of global parameters in one of the projects by 21 by using an automatic conversion with\nVim substitution patterns with backreferences without any problems."),(0,o.kt)("p",null,"Following the ",(0,o.kt)("a",{parentName:"p",href:"#standard-plugins-hash"},"Standard Plugins Hash")," section, the plugin could even use a common hash name \u2013\n",(0,o.kt)("inlineCode",{parentName:"p"},"Plugins")," \u2013 to lower the pollution even more."))}m.isMDXComponent=!0}}]);